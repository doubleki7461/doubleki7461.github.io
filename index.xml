<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>doubleki&#39;s blog</title>
    <link>https://blog.doubleki.eu.org/</link>
    <description>Recent content on doubleki&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 23 Apr 2023 10:40:53 +0800</lastBuildDate><atom:link href="https://blog.doubleki.eu.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>解题报告：P8160 战略游戏</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8160-%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Sun, 23 Apr 2023 10:40:53 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8160-%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F/</guid>
      <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 本题使用树状dp解决
定义状态：
$dp[i][j]$ 表示在 $i$ 结点处于 $j$ 状态时，以 $i$ 结点为根的子树所需要的最少卫兵数量（$0$ 表示有卫兵，$1$ 表示无卫兵）
则可得状态转移方程：
$$dp[i][j]= \begin{cases} \sum \limits_{k \in i.son} {\min \lbrace dp[k][0],dp[k][1] \rbrace}&amp;amp; (j=1),\newline \sum \limits_{k \in i.son} {dp[k][1]}&amp;amp; (j=0), \end{cases} $$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN=1500; struct Edge { int from; int to; int dis; Edge(int u, int v, int d) : from(u), to(v), dis(d) { // nothing } }; int n; int fa[MAXN+5]; int nums[MAXN+5]; int dp[MAXN+5][3]; vector&amp;lt;Edge&amp;gt; edge; vector&amp;lt;int&amp;gt; g[MAXN+5]; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } void add(int u, int v, int d) { edge.</description>
    </item>
    
    <item>
      <title>解题报告：P8159 数字转换</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8159-%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 23 Apr 2023 10:23:34 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8159-%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/</guid>
      <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 首先预处理出每个数字的约数，比较大小，建图
则问题转换为无根树上的最长链问题
首先任意选取结点，以该结点为根进行 dfs，将无根树转有根树
则以 $dp[i][1]$ 表示以 $i$ 到以 $i$ 为根的子树的叶结点的最长距离，$dp[i][2]$ 表示次长距离，则树上的最长链显然等于：
$$ans=\max \limits_{i \in map} \lbrace dp[i][1]+dp[i][2] \rbrace$$
状态转移方程分为两种情况：
$dp[e.to][1] + e.dis &amp;gt; dp[i][1]$（$e \in g[i]$）时，令 $dp[i][2]=dp[i][1]$，$dp[i][1]=dp[e.to][1] + e.dis$ $dp[i][1] &amp;gt; dp[e.to][1] + e.dis &amp;gt; dp[i][2]$（$e \in g[i]$）时，令 $dp[i][2]=dp[e.to][1] + e.dis$ 代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN=50000; struct Edge { int from; int to; int dis; Edge(int u, int v, int d) : from(u), to(v), dis(d) { // nothing } }; int ans; int n; int fa[MAXN+5]; int dp[MAXN+5][3]; int sum[MAXN+5]; vector&amp;lt;Edge&amp;gt; edge; vector&amp;lt;int&amp;gt; g[MAXN+5]; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } void add(int u, int v, int d) { edge.</description>
    </item>
    
    <item>
      <title>解题报告：P8167 没有上司的舞会</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8167-%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A/</link>
      <pubDate>Sun, 23 Apr 2023 09:24:42 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8167-%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A/</guid>
      <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），洛谷
思路 定义状态：$dp[i][j]$ 表示以 $i$ 为根的子树当 $i$ 处于 $j$ 状态时的最大快乐指数（ $j=0$ 表示 $i$ 不来，$j=1$ 则表示 $i$ 来）
状态转移方程：
$$dp[i][j]= \begin{cases} \sum \limits_{k \in i.son} max \lbrace dp[k][0], dp[k][1] \rbrace,&amp;amp; (j=0), \newline \sum \limits_{k \in i.son} dp[k][0] ,&amp;amp; (j=1) \end{cases} $$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN=6000; struct Edge { int from; int to; int dis; Edge(int u, int v, int d) : from(u), to(v), dis(d) { // nothing } }; int n,q; int root; int vis[MAXN+5]; int nums[MAXN+5]; int dp[MAXN+5][3]; vector&amp;lt;Edge&amp;gt; edge; vector&amp;lt;int&amp;gt; g[MAXN+5]; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } void add(int u, int v, int d) { edge.</description>
    </item>
    
    <item>
      <title>解题报告：P8158 选课</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8158-%E9%80%89%E8%AF%BE/</link>
      <pubDate>Sun, 23 Apr 2023 09:03:39 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8158-%E9%80%89%E8%AF%BE/</guid>
      <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 本题使用树状dp解决：
首先将无根树转有根树（虚拟一个 $0$ 号结点，为所有结点的父亲，这样同时也避免了输入时的特殊情况处理）
定义状态：
$dp[i][j]$ 表示以 $i$ 为根的子树上选 $j$ 门课可以得到的最大学分
状态转移方程：
$$dp[i][j]=\max_{\sum\limits_{m=1}\limits^{|i.son|}k_m = j-1} \lbrace \sum\limits_{m=1}\limits^{|i.son|}dp[i.son_m][k_m] \rbrace + nums[i]$$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN=300; struct Edge { int from; int to; int dis; Edge(int u, int v, int d) : from(u), to(v), dis(d) { // nothing } }; int n,q; int nums[MAXN+5]; int dp[MAXN+5][MAXN+5]; vector&amp;lt;Edge&amp;gt; edge; vector&amp;lt;int&amp;gt; g[MAXN+5]; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } void add(int u, int v, int d) { edge.</description>
    </item>
    
    <item>
      <title>解题报告：P8157 二叉苹果树</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8157-%E4%BA%8C%E5%8F%89%E8%8B%B9%E6%9E%9C%E6%A0%91/</link>
      <pubDate>Sun, 23 Apr 2023 08:50:58 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8157-%E4%BA%8C%E5%8F%89%E8%8B%B9%E6%9E%9C%E6%A0%91/</guid>
      <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 题目中说要求保留 $Q$ 个树枝，等价于保留 $Q+1$ 个结点，而每个树枝上的苹果树可以看为其连接着的儿子上的苹果，则题目转化为：给定一棵已知的二叉树，保留 $Q+1$ 个结点，求所保留的结点的最大权值和
则本题可以使用dp求解，定义 $dp[i][j]$ 表示以 $i$ 为树根的子树上保留 $j$ 个结点时的最大权值和
状态转移方程为：
$$dp[i][j]=max \lbrace dp[i.lson][k]+dp[i.rson][j-k-1]+nums[i] \rbrace, k \in [0,j-1]$$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN=100; struct Edge { int from; int to; int dis; Edge(int u, int v, int d) : from(u), to(v), dis(d) { // nothing } }; int n,q; int nums[MAXN+5]; int dp[MAXN+5][MAXN+5]; vector&amp;lt;Edge&amp;gt; edge; vector&amp;lt;int&amp;gt; g[MAXN+5]; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } void add(int u, int v, int d) { edge.</description>
    </item>
    
    <item>
      <title>解题报告：P8155 分离与合体</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8155-%E5%88%86%E7%A6%BB%E4%B8%8E%E5%90%88%E4%BD%93/</link>
      <pubDate>Sat, 22 Apr 2023 17:19:54 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8155-%E5%88%86%E7%A6%BB%E4%B8%8E%E5%90%88%E4%BD%93/</guid>
      <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 定义状态：
$dp[i][j]$ 为从 $i$ 合并至 $j$ 所得到的最大得分
状态转移：
$$dp[i][j]=max \lbrace dp[i][k]+dp[k+1][j]+(num[i]+num[j])*num[k] \rbrace, k \in [i,j-1]$$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 300; typedef __int128 LL; LL n; LL len; LL flag; LL num[MAXN+5]; LL dp[MAXN+5][MAXN+5][2]; LL vis[MAXN+5]; inline LL readLL() { LL res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeLL(LL x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeLL(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } void bfs(LL l,LL r,LL step) { if(l&amp;gt;=r || l==-1 || r==-1) { return; } if(step==len) { flag=1; writeLL(dp[l][r][2]); putchar(&amp;#39; &amp;#39;); return; } bfs(l,dp[l][r][2],step+1); bfs(dp[l][r][2]+1,r,step+1); } void printans() { flag=1; len=1; while(flag) { flag=0; bfs(1,n,1); len++; } } LL solve(LL l,LL r) { if(l==r) { return dp[l][r][1]=0; } if(dp[l][r][1]!</description>
    </item>
    
    <item>
      <title>解题报告：P8154 括号配对</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8154-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/</link>
      <pubDate>Sat, 22 Apr 2023 17:02:01 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8154-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/</guid>
      <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 定义状态：$dp[i][j]$ 表示从 $i$ 到 $j$ 所需要的最少添加字符数
显然，添加字符数等于去掉多少个字符后该字符串符合要求的最少字符数
则可得状态转移方程：
$$ dp[i][j]= \begin{cases} min\lbrace dp[i+1][j-1],dp[i][k]+dp[k+1][j]\rbrace (k \in (i,j]), &amp;amp;(check(str[i-1],str[j-1])=true), \newline min\lbrace dp[i][k]+dp[k+1][j]\rbrace (k \in (i,j]), &amp;amp;(check(str[i-1],str[j-1])=false) \end{cases} $$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 200; typedef long long LL; LL n; LL ans; string str; LL dp[MAXN*2+5][MAXN*2+5]; inline LL readLL() { LL res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeLL(LL x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeLL(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } bool check(char a,char b) { return (a==&amp;#39;(&amp;#39;&amp;amp;&amp;amp;b==&amp;#39;)&amp;#39;)||(a==&amp;#39;[&amp;#39;&amp;amp;&amp;amp;b==&amp;#39;]&amp;#39;); } int main() { memset(dp,0x3f,sizeof(dp)); cin &amp;gt;&amp;gt; str; n=str.</description>
    </item>
    
    <item>
      <title>解题报告：P8153 凸多边形的划分</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8153-%E5%87%B8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%9A%84%E5%88%92%E5%88%86/</link>
      <pubDate>Sat, 22 Apr 2023 16:37:01 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8153-%E5%87%B8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%9A%84%E5%88%92%E5%88%86/</guid>
      <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 定义状态：$dp[i][j]$ 表示从 $i$ 合并到 $j$ 所需要的最少权值和，则可得：
$$dp[i][j]=min \lbrace dp[i][k]+dp[k][j]+num[i]*num[j]*num[k],k \in (i,j) \rbrace$$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 50; typedef __int128 LL; LL n; LL ans; LL num[MAXN*2+5]; LL dp[MAXN*2+5][MAXN*2+5]; inline LL readLL() { LL res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeLL(LL x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeLL(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } int main() { ans=0x3f3f3f3f; memset(dp,0x3f,sizeof(dp)); n=readLL(); for(LL i=1;i&amp;lt;=n;i++) { num[i]=readLL(); } for(LL i=n+1;i&amp;lt;=2*n;i++) { num[i]=num[i-n]; } for(LL i=1;i&amp;lt;=2*n;i++) { dp[i][i+1]=0; } for(LL l=3;l&amp;lt;=2*n;l++) { for(LL i=1;i&amp;lt;=2*n-l+1;i++) { int j=i+l-1; for(LL k=i+1;k&amp;lt;j;k++) { dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j]+num[i]*num[j]*num[k]); } } } ans=dp[1][n]; writeLL(ans); putchar(&amp;#39;\n&amp;#39;); } </description>
    </item>
    
    <item>
      <title>解题报告：P8152 能量项链</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8152-%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE/</link>
      <pubDate>Sat, 22 Apr 2023 15:50:12 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8152-%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE/</guid>
      <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 区间dp，使用 $dp \lbrack i \rbrack \lbrack j \rbrack$ 表示从$i$合并到$j$所获得到的最大能量，则有：
$$dp \lbrack i \rbrack \lbrack j \rbrack = max \lbrace dp \lbrack i \rbrack \lbrack k \rbrack + dp \lbrack k+1 \rbrack \lbrack j \rbrack + nums \lbrack i \rbrack * nums \lbrack k+1 \rbrack * nums \lbrack j+1 \rbrack \rbrace , k \in \lbrack i,j \rparen $$
（$nums[i]$ 代表了 $i$ 上的头标记）
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 200; typedef __int128 LL; LL n; LL ans; LL num[MAXN*2+5]; LL dp[MAXN*2+5][MAXN*2+5]; inline LL readLL() { LL res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeLL(LL x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeLL(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } int main() { n=readLL(); for(LL i=1;i&amp;lt;=n;i++) { num[i]=readLL(); } for(LL i=n+1;i&amp;lt;=2*n;i++) { num[i]=num[i-n]; } ans=-1; memset(dp,0,sizeof(dp)); for(LL i=1;i&amp;lt;=2*n;i++) { dp[i][i]=dp[i][i]=0; } for(LL l=2;l&amp;lt;=2*n;l++) { for(LL i=1;i&amp;lt;=2*n-l+1;i++) { int j=i+l-1; for(LL k=i;k&amp;lt;j;k++) { dp[i][j]=max(dp[i][j],dp[i][k]+dp[k+1][j]+num[i]*num[k+1]*num[j+1]); } } } for(LL i=1;i&amp;lt;=n;i++) { ans=max(ans,dp[i][i+n-1]); } writeLL(ans); putchar(&amp;#39;\n&amp;#39;); } </description>
    </item>
    
    <item>
      <title>解题报告：P0289 【模板】扫描线</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap0289-%E6%A8%A1%E6%9D%BF%E6%89%AB%E6%8F%8F%E7%BA%BF/</link>
      <pubDate>Sun, 16 Apr 2023 09:07:12 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap0289-%E6%A8%A1%E6%9D%BF%E6%89%AB%E6%8F%8F%E7%BA%BF/</guid>
      <description>题目链接：许昌高中高级OJ
思路 将矩形面积分解为众多小矩形的面积求和，如图
则图中每个矩形面积为其底乘高，其底为相邻两个竖边的横坐标之差，高则为当前竖边的长度
这个矩形的底较为好求，首先以存储竖边的方式存储矩形，不难发现需要存储三个量：一个x坐标，两个y坐标，存储完之后按照x坐标进行排序，相邻两个边的横坐标之差即为当前矩形的底边
求高则较为麻烦，首先想象有一条与y轴平行的竖直线扫过矩形，则高即为该竖直线在矩形中的长度，那么如何求这个长度呢？
在未扫过任何矩形时，该长度为0，每扫过一个矩形的左边的边，则向该边区间的标记上增加1，每扫过一个右边的边，则向标记上减1，计算标记长度即可，在此处应使用线段树进行提速，每条边的标记长度（len）分为两种情况：
该边被完全标记（cnt=1），则标记长度即为区间长度 该边未被完全标记（cnt!=1），则标记长度即为其左子树（左半部分）标记长度加上右子树（右半部分）标记长度 接下来考虑实现，存储边可使用结构体，存储x,y1,y2坐标，以及一个k变量区分是左边还是右边，则可得出 Edge 的定义：
typedef unsigned long long ull; struct Edge { ull x; pair&amp;lt;ull, ull&amp;gt; y; ull k; Edge() : x(0), y(pair&amp;lt;ull, ull&amp;gt;(0, 0)), k(0) { // nothing } Edge(ull x_, ull y1_, ull y2_, ull k_) : x(x_), y(pair&amp;lt;ull, ull&amp;gt;(y1_, y2_)), k(k_) { // nothing } bool operator&amp;lt;(Edge a) { if (a.x == x) { return k &amp;lt; a.k; } return x &amp;lt; a.</description>
    </item>
    
  </channel>
</rss>
