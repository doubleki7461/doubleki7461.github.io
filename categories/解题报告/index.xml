<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>解题报告 on doubleki&#39;s blog</title>
    <link>https://blog.doubleki.eu.org/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
    <description>Recent content in 解题报告 on doubleki&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 22 Apr 2023 17:02:01 +0800</lastBuildDate><atom:link href="https://blog.doubleki.eu.org/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>解题报告：P8154 括号配对</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8154-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/</link>
      <pubDate>Sat, 22 Apr 2023 17:02:01 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8154-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/</guid>
      <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 定义状态：$dp[i][j]$ 表示从 $i$ 到 $j$ 所需要的最少添加字符数
显然，添加字符数等于去掉多少个字符后该字符串符合要求的最少字符数
则可得状态转移方程：
$$ dp[i][j]= \begin{cases} min\lbrace dp[i+1][j-1],dp[i][k]+dp[k+1][j]\rbrace (k \in (i,j]), &amp;amp;(check(str[i-1],str[j-1])=true),\ min\lbrace dp[i][k]+dp[k+1][j]\rbrace (k \in (i,j]), &amp;amp;(check(str[i-1],str[j-1])=false) \end{cases} $$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 200; typedef long long LL; LL n; LL ans; string str; LL dp[MAXN*2+5][MAXN*2+5]; inline LL readLL() { LL res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeLL(LL x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeLL(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } bool check(char a,char b) { return (a==&amp;#39;(&amp;#39;&amp;amp;&amp;amp;b==&amp;#39;)&amp;#39;)||(a==&amp;#39;[&amp;#39;&amp;amp;&amp;amp;b==&amp;#39;]&amp;#39;); } int main() { memset(dp,0x3f,sizeof(dp)); cin &amp;gt;&amp;gt; str; n=str.</description>
    </item>
    
    <item>
      <title>解题报告：P8153 凸多边形的划分</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8153-%E5%87%B8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%9A%84%E5%88%92%E5%88%86/</link>
      <pubDate>Sat, 22 Apr 2023 16:37:01 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8153-%E5%87%B8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%9A%84%E5%88%92%E5%88%86/</guid>
      <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 定义状态：$dp[i][j]$ 表示从 $i$ 合并到 $j$ 所需要的最少权值和，则可得：
$$dp[i][j]=min \lbrace dp[i][k]+dp[k][j]+num[i]*num[j]*num[k],k \in (i,j) \rbrace$$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 50; typedef __int128 LL; LL n; LL ans; LL num[MAXN*2+5]; LL dp[MAXN*2+5][MAXN*2+5]; inline LL readLL() { LL res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeLL(LL x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeLL(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } int main() { ans=0x3f3f3f3f; memset(dp,0x3f,sizeof(dp)); n=readLL(); for(LL i=1;i&amp;lt;=n;i++) { num[i]=readLL(); } for(LL i=n+1;i&amp;lt;=2*n;i++) { num[i]=num[i-n]; } for(LL i=1;i&amp;lt;=2*n;i++) { dp[i][i+1]=0; } for(LL l=3;l&amp;lt;=2*n;l++) { for(LL i=1;i&amp;lt;=2*n-l+1;i++) { int j=i+l-1; for(LL k=i+1;k&amp;lt;j;k++) { dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j]+num[i]*num[j]*num[k]); } } } ans=dp[1][n]; writeLL(ans); putchar(&amp;#39;\n&amp;#39;); } </description>
    </item>
    
    <item>
      <title>解题报告：P8152 能量项链</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8152-%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE/</link>
      <pubDate>Sat, 22 Apr 2023 15:50:12 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8152-%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE/</guid>
      <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 区间dp，使用 $dp \lbrack i \rbrack \lbrack j \rbrack$ 表示从$i$合并到$j$所获得到的最大能量，则有：
$$dp \lbrack i \rbrack \lbrack j \rbrack = max \lbrace dp \lbrack i \rbrack \lbrack k \rbrack + dp \lbrack k+1 \rbrack \lbrack j \rbrack + nums \lbrack i \rbrack * nums \lbrack k+1 \rbrack * nums \lbrack j+1 \rbrack \rbrace , k \in \lbrack i,j \rparen $$
（$nums[i]$ 代表了 $i$ 上的头标记）
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 200; typedef __int128 LL; LL n; LL ans; LL num[MAXN*2+5]; LL dp[MAXN*2+5][MAXN*2+5]; inline LL readLL() { LL res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeLL(LL x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeLL(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } int main() { n=readLL(); for(LL i=1;i&amp;lt;=n;i++) { num[i]=readLL(); } for(LL i=n+1;i&amp;lt;=2*n;i++) { num[i]=num[i-n]; } ans=-1; memset(dp,0,sizeof(dp)); for(LL i=1;i&amp;lt;=2*n;i++) { dp[i][i]=dp[i][i]=0; } for(LL l=2;l&amp;lt;=2*n;l++) { for(LL i=1;i&amp;lt;=2*n-l+1;i++) { int j=i+l-1; for(LL k=i;k&amp;lt;j;k++) { dp[i][j]=max(dp[i][j],dp[i][k]+dp[k+1][j]+num[i]*num[k+1]*num[j+1]); } } } for(LL i=1;i&amp;lt;=n;i++) { ans=max(ans,dp[i][i+n-1]); } writeLL(ans); putchar(&amp;#39;\n&amp;#39;); } </description>
    </item>
    
    <item>
      <title>解题报告：P0289 【模板】扫描线</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap0289-%E6%A8%A1%E6%9D%BF%E6%89%AB%E6%8F%8F%E7%BA%BF/</link>
      <pubDate>Sun, 16 Apr 2023 09:07:12 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap0289-%E6%A8%A1%E6%9D%BF%E6%89%AB%E6%8F%8F%E7%BA%BF/</guid>
      <description>题目链接：许昌高中高级OJ
思路 将矩形面积分解为众多小矩形的面积求和，如图
则图中每个矩形面积为其底乘高，其底为相邻两个竖边的横坐标之差，高则为当前竖边的长度
这个矩形的底较为好求，首先以存储竖边的方式存储矩形，不难发现需要存储三个量：一个x坐标，两个y坐标，存储完之后按照x坐标进行排序，相邻两个边的横坐标之差即为当前矩形的底边
求高则较为麻烦，首先想象有一条与y轴平行的竖直线扫过矩形，则高即为该竖直线在矩形中的长度，那么如何求这个长度呢？
在未扫过任何矩形时，该长度为0，每扫过一个矩形的左边的边，则向该边区间的标记上增加1，每扫过一个右边的边，则向标记上减1，计算标记长度即可，在此处应使用线段树进行提速，每条边的标记长度（len）分为两种情况：
该边被完全标记（cnt=1），则标记长度即为区间长度 该边未被完全标记（cnt!=1），则标记长度即为其左子树（左半部分）标记长度加上右子树（右半部分）标记长度 接下来考虑实现，存储边可使用结构体，存储x,y1,y2坐标，以及一个k变量区分是左边还是右边，则可得出 Edge 的定义：
typedef unsigned long long ull; struct Edge { ull x; pair&amp;lt;ull, ull&amp;gt; y; ull k; Edge() : x(0), y(pair&amp;lt;ull, ull&amp;gt;(0, 0)), k(0) { // nothing } Edge(ull x_, ull y1_, ull y2_, ull k_) : x(x_), y(pair&amp;lt;ull, ull&amp;gt;(y1_, y2_)), k(k_) { // nothing } bool operator&amp;lt;(Edge a) { if (a.x == x) { return k &amp;lt; a.k; } return x &amp;lt; a.</description>
    </item>
    
    <item>
      <title>解题报告：P8151 石子合并2</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8151-%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B62/</link>
      <pubDate>Sun, 16 Apr 2023 09:07:12 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8151-%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B62/</guid>
      <description>题目链接：许昌高中高级OJ，LibreOJ
思路 首先考虑不再一条环上，即所有石子排成一列，每次合并相邻的两堆石子，求最大得分的问题
由于每次只能合并相邻的石子，不满足部分最优解是全局最优解，故无法使用贪心算法
则使用区间dp，记录 $dp[i][j]$ 为从i位置合并到j位置所得到的最小（最大）得分，则状态转移方程为：
$$dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1])$$
分两次进行计算最大值与最小值即可
接下来考虑有环的情况，有两种思路：
断环，枚举在 $[1,i]$ 位置断环，分别计算最值，时间复杂度为 $\Theta(n^4)$ 复制，将原数组复制一次，计算新数组的最值，最后取 $max \lbrace dp[i][i+n-1],i \in \lbrack 1,n \rbrack \rbrace$ 即可，时间复杂度为 $\Theta(n^3)$ 代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 200; int n; int ans; int num[MAXN*2+5]; int sum[MAXN*2+5]; int dp[MAXN*2+5][MAXN*2+5]; inline int readInt() { int res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeInt(int x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeInt(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } int main() { n=readInt(); for(int i=1;i&amp;lt;=n;i++) { num[i]=readInt(); sum[i]=sum[i-1]+num[i]; } for(int i=n+1;i&amp;lt;=2*n;i++) { num[i]=num[i-n]; sum[i]=sum[i-1]+num[i]; } ans=0x3f3f3f3f; memset(dp,0x3f,sizeof(dp)); for(int i=1;i&amp;lt;=2*n;i++) { dp[i][i]=dp[i][i]=0; } for(int l=2;l&amp;lt;=2*n;l++) { for(int i=1;i&amp;lt;=2*n-l+1;i++) { int j=i+l-1; for(int k=i;k&amp;lt;j;k++) { dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1]); } } } for(int i=1;i&amp;lt;=n;i++) { ans=min(ans,dp[i][i+n-1]); } writeInt(ans); putchar(&amp;#39;\n&amp;#39;); ans=-1; memset(dp,0,sizeof(dp)); for(int i=1;i&amp;lt;=2*n;i++) { dp[i][i]=dp[i][i]=0; } for(int l=2;l&amp;lt;=2*n;l++) { for(int i=1;i&amp;lt;=2*n-l+1;i++) { int j=i+l-1; for(int k=i;k&amp;lt;j;k++) { dp[i][j]=max(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1]); } } } for(int i=1;i&amp;lt;=n;i++) { ans=max(ans,dp[i][i+n-1]); } writeInt(ans); putchar(&amp;#39;\n&amp;#39;); } </description>
    </item>
    
    <item>
      <title>解题报告：P0288 Number of Airplanes in the Sky（数飞机）</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap0288-number-of-airplanes-in-the-sky%E6%95%B0%E9%A3%9E%E6%9C%BA/</link>
      <pubDate>Sat, 15 Apr 2023 09:07:12 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap0288-number-of-airplanes-in-the-sky%E6%95%B0%E9%A3%9E%E6%9C%BA/</guid>
      <description>题目链接：许昌高中高级OJ
思路 对于每架飞机，记录其起飞与降落时间，按照时间第一优先级，起飞降落第二优先级排序，从头到尾进行扫描，起飞飞机数 +1，降落飞机数 -1，取 max 即为结果
注意：落地时间应为降落时间 +1
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } struct Time { int t; int k; Time(int t_, int k_) : t(t_), k(k_) { } bool operator&amp;lt;(Time a) { if (t == a.</description>
    </item>
    
  </channel>
</rss>
