<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>动态规划（dp） on doubleki&#39;s blog</title>
    <link>https://blog.doubleki.eu.org/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dp/</link>
    <description>Recent content in 动态规划（dp） on doubleki&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 16 Apr 2023 09:07:12 +0800</lastBuildDate><atom:link href="https://blog.doubleki.eu.org/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92dp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>解题报告：P8151 石子合并2</title>
      <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8151-%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B62/</link>
      <pubDate>Sun, 16 Apr 2023 09:07:12 +0800</pubDate>
      
      <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8151-%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B62/</guid>
      <description>题目链接：许昌高中高级OJ，LibreOJ
思路 首先考虑不再一条环上，即所有石子排成一列，每次合并相邻的两堆石子，求最大得分的问题
由于每次只能合并相邻的石子，不满足部分最优解是全局最优解，故无法使用贪心算法
则使用区间dp，记录 $dp[i][j]$ 为从i位置合并到j位置所得到的最小（最大）得分，则状态转移方程为：
$$dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1])$$
分两次进行计算最大值与最小值即可
接下来考虑有环的情况，有两种思路：
断环，枚举在 $[1,i]$ 位置断环，分别计算最值，时间复杂度为 $\Theta(n^4)$ 复制，将原数组复制一次，计算新数组的最值，最后取 $max \lbrace dp[i][i+n-1],i \in \lbrack 1,n \rbrack \rbrace$ 即可，时间复杂度为 $\Theta(n^3)$ 代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 200; int n; int ans; int num[MAXN*2+5]; int sum[MAXN*2+5]; int dp[MAXN*2+5][MAXN*2+5]; inline int readInt() { int res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeInt(int x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeInt(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } int main() { n=readInt(); for(int i=1;i&amp;lt;=n;i++) { num[i]=readInt(); sum[i]=sum[i-1]+num[i]; } for(int i=n+1;i&amp;lt;=2*n;i++) { num[i]=num[i-n]; sum[i]=sum[i-1]+num[i]; } ans=0x3f3f3f3f; memset(dp,0x3f,sizeof(dp)); for(int i=1;i&amp;lt;=2*n;i++) { dp[i][i]=dp[i][i]=0; } for(int l=2;l&amp;lt;=2*n;l++) { for(int i=1;i&amp;lt;=2*n-l+1;i++) { int j=i+l-1; for(int k=i;k&amp;lt;j;k++) { dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1]); } } } for(int i=1;i&amp;lt;=n;i++) { ans=min(ans,dp[i][i+n-1]); } writeInt(ans); putchar(&amp;#39;\n&amp;#39;); ans=-1; memset(dp,0,sizeof(dp)); for(int i=1;i&amp;lt;=2*n;i++) { dp[i][i]=dp[i][i]=0; } for(int l=2;l&amp;lt;=2*n;l++) { for(int i=1;i&amp;lt;=2*n-l+1;i++) { int j=i+l-1; for(int k=i;k&amp;lt;j;k++) { dp[i][j]=max(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1]); } } } for(int i=1;i&amp;lt;=n;i++) { ans=max(ans,dp[i][i+n-1]); } writeInt(ans); putchar(&amp;#39;\n&amp;#39;); } </description>
    </item>
    
  </channel>
</rss>
