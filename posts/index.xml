<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on doubleki&#39;s blog</title>
        <link>https://blog.doubleki.eu.org/posts/</link>
        <description>Recent content in Posts on doubleki&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 23 Apr 2023 15:51:47 +0800</lastBuildDate>
        <atom:link href="https://blog.doubleki.eu.org/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>解题报告：P8161 皇宫看守</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8161-%E7%9A%87%E5%AE%AB%E7%9C%8B%E5%AE%88/</link>
            <pubDate>Sun, 23 Apr 2023 15:51:47 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8161-%E7%9A%87%E5%AE%AB%E7%9C%8B%E5%AE%88/</guid>
            <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 本题使用树状dp解决
首先定义状态：$dp[i][j]$ 表示当结点 $i$ 处于 $j$ 状态时以 $i$ 为根结点的子树所需要的最少卫兵数（$j=1$ 表示被父亲看守，$j=2$ 表示被儿子看守，$j=1$ 表示被自己看守）
状态转移方程：
$$dp[x][k]= \begin{cases} \sum \limits_{i \in x.son} \min \lbrace dp[i][2],dp[i][3] \rbrace &amp;amp; (k=1),\newline \sum \limits_{i \in x.son} {\min \lbrace dp[i][2],dp[i][3] \rbrace} + \min \limits_{i \in x.son} \lbrace dp[i][3]- \min \lbrace dp[i][2],dp[i][3] \rbrace \rbrace &amp;amp; (k=2),\newline \sum \limits_{i \in x.son} {\min \lbrace dp[i][2],dp[i][3],dp[i][3] \rbrace} + nums[x] &amp;amp; (k=3) \end{cases} $$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN=1500; struct Edge { int from; int to; int dis; Edge(int u, int v, int d) : from(u), to(v), dis(d) { // nothing } }; int n; int root; int vis[MAXN+5]; int nums[MAXN+5]; int dp[MAXN+5][4]; vector&amp;lt;Edge&amp;gt; edge; vector&amp;lt;int&amp;gt; g[MAXN+5]; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } void add(int u, int v, int d) { edge.</description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://192.168.22.60:9998/d/C0006/p/P8161?tid=643ba5af6f36ff40bf27ca3e">许昌高中高级OJ（内网）</a>，<a href="http://www.xcschool.com:9998/d/C0006/p/P8161?tid=643ba5af6f36ff40bf27ca3e">许昌高中高级OJ（外网）</a>，<a href="https://loj.ac/p/10157">LibreOJ</a></p>
<h2 id="思路">思路</h2>
<p>本题使用树状dp解决</p>
<p>首先定义状态：$dp[i][j]$ 表示当结点 $i$ 处于 $j$ 状态时以 $i$ 为根结点的子树所需要的最少卫兵数（$j=1$ 表示被父亲看守，$j=2$ 表示被儿子看守，$j=1$ 表示被自己看守）</p>
<p>状态转移方程：</p>
<p>$$dp[x][k]=
\begin{cases}
\sum \limits_{i \in x.son} \min \lbrace dp[i][2],dp[i][3] \rbrace &amp; (k=1),\newline
\sum \limits_{i \in x.son} {\min \lbrace dp[i][2],dp[i][3] \rbrace} + \min \limits_{i \in x.son} \lbrace dp[i][3]- \min \lbrace dp[i][2],dp[i][3] \rbrace \rbrace &amp; (k=2),\newline
\sum \limits_{i \in x.son} {\min \lbrace dp[i][2],dp[i][3],dp[i][3] \rbrace} + nums[x]  &amp; (k=3)
\end{cases}
$$</p>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> MAXN<span style="color:#f92672">=</span><span style="color:#ae81ff">1500</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Edge</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> from;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> to;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> dis;
</span></span><span style="display:flex;"><span>    Edge(<span style="color:#66d9ef">int</span> u, <span style="color:#66d9ef">int</span> v, <span style="color:#66d9ef">int</span> d) <span style="color:#f92672">:</span> from(u), to(v), dis(d)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// nothing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> n;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> root;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> vis[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nums[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> dp[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>][<span style="color:#ae81ff">4</span>];
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span>Edge<span style="color:#f92672">&gt;</span> edge;
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> g[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">readInt</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, f <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">||</span> ch <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (ch <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            f <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">&amp;&amp;</span> ch <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> ch <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>;
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> f;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">write</span>(<span style="color:#66d9ef">int</span> x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        putchar(<span style="color:#e6db74">&#39;-&#39;</span>), x <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>x;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        write(x <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    putchar(x <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> u, <span style="color:#66d9ef">int</span> v, <span style="color:#66d9ef">int</span> d)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    edge.push_back(Edge(u, v, d));
</span></span><span style="display:flex;"><span>    g[u].push_back(edge.size() <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">solve</span>(<span style="color:#66d9ef">int</span> x,<span style="color:#66d9ef">int</span> k)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(dp[x][k]<span style="color:#f92672">!=</span><span style="color:#ae81ff">0x3f3f3f3f</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> dp[x][k];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	dp[x][k]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(k<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span>) <span style="color:#75715e">// 被父亲看守
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span>g[x].size();i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>edge[g[x][i]].to;
</span></span><span style="display:flex;"><span>			dp[x][k]<span style="color:#f92672">+=</span>min(solve(v,<span style="color:#ae81ff">2</span>),solve(v,<span style="color:#ae81ff">3</span>));
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(k<span style="color:#f92672">==</span><span style="color:#ae81ff">2</span>) <span style="color:#75715e">// 被儿子看守
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">int</span> d<span style="color:#f92672">=</span><span style="color:#ae81ff">0x3f3f3f3f</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span>g[x].size();i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>edge[g[x][i]].to;
</span></span><span style="display:flex;"><span>			dp[x][k]<span style="color:#f92672">+=</span>min(solve(v,<span style="color:#ae81ff">2</span>),solve(v,<span style="color:#ae81ff">3</span>));
</span></span><span style="display:flex;"><span>			d<span style="color:#f92672">=</span>min(d,solve(v,<span style="color:#ae81ff">3</span>)<span style="color:#f92672">-</span>min(solve(v,<span style="color:#ae81ff">3</span>),solve(v,<span style="color:#ae81ff">2</span>)));
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		dp[x][k]<span style="color:#f92672">+=</span>d;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(k<span style="color:#f92672">==</span><span style="color:#ae81ff">3</span>) <span style="color:#75715e">// 被自己看守
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	{
</span></span><span style="display:flex;"><span>		dp[x][k]<span style="color:#f92672">+=</span>nums[x];
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span>g[x].size();i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>edge[g[x][i]].to;
</span></span><span style="display:flex;"><span>			dp[x][k]<span style="color:#f92672">+=</span>min(min(solve(v,<span style="color:#ae81ff">1</span>),solve(v,<span style="color:#ae81ff">2</span>)),solve(v,<span style="color:#ae81ff">3</span>));
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> dp[x][k];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	memset(dp,<span style="color:#ae81ff">0x3f</span>,<span style="color:#66d9ef">sizeof</span>(dp));
</span></span><span style="display:flex;"><span>    n<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    	<span style="color:#66d9ef">int</span> id,k;
</span></span><span style="display:flex;"><span>    	id<span style="color:#f92672">=</span>readInt(),nums[id]<span style="color:#f92672">=</span>readInt(),k<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>    	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> j<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;j<span style="color:#f92672">&lt;=</span>k;j<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    	{
</span></span><span style="display:flex;"><span>    		<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>    		vis[v]<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    		add(id,v,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(vis[i]<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			root<span style="color:#f92672">=</span>i;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	write(min(solve(root,<span style="color:#ae81ff">2</span>),solve(root,<span style="color:#ae81ff">3</span>)));
</span></span><span style="display:flex;"><span>	putchar(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>解题报告：P8160 战略游戏</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8160-%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F/</link>
            <pubDate>Sun, 23 Apr 2023 10:40:53 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8160-%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F/</guid>
            <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 本题使用树状dp解决
定义状态：
$dp[i][j]$ 表示在 $i$ 结点处于 $j$ 状态时，以 $i$ 结点为根的子树所需要的最少卫兵数量（$0$ 表示有卫兵，$1$ 表示无卫兵）
则可得状态转移方程：
$$dp[i][j]= \begin{cases} \sum \limits_{k \in i.son} {\min \lbrace dp[k][0],dp[k][1] \rbrace}&amp;amp; (j=1),\newline \sum \limits_{k \in i.son} {dp[k][1]}&amp;amp; (j=0), \end{cases} $$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN=1500; struct Edge { int from; int to; int dis; Edge(int u, int v, int d) : from(u), to(v), dis(d) { // nothing } }; int n; int fa[MAXN+5]; int nums[MAXN+5]; int dp[MAXN+5][3]; vector&amp;lt;Edge&amp;gt; edge; vector&amp;lt;int&amp;gt; g[MAXN+5]; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } void add(int u, int v, int d) { edge.</description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://192.168.22.60:9998/d/C0006/p/P8160?tid=643ba5af6f36ff40bf27ca3e">许昌高中高级OJ（内网）</a>，<a href="http://www.xcschool.com:9998/d/C0006/p/P8160?tid=643ba5af6f36ff40bf27ca3e">许昌高中高级OJ（外网）</a>，<a href="https://loj.ac/p/10156">LibreOJ</a></p>
<h2 id="思路">思路</h2>
<p>本题使用树状dp解决</p>
<p>定义状态：</p>
<p>$dp[i][j]$ 表示在 $i$ 结点处于 $j$ 状态时，以 $i$ 结点为根的子树所需要的最少卫兵数量（$0$ 表示有卫兵，$1$ 表示无卫兵）</p>
<p>则可得状态转移方程：</p>
<p>$$dp[i][j]=
\begin{cases}
\sum \limits_{k \in i.son} {\min \lbrace dp[k][0],dp[k][1] \rbrace}&amp; (j=1),\newline
\sum \limits_{k \in i.son} {dp[k][1]}&amp; (j=0),
\end{cases}
$$</p>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> MAXN<span style="color:#f92672">=</span><span style="color:#ae81ff">1500</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Edge</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> from;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> to;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> dis;
</span></span><span style="display:flex;"><span>    Edge(<span style="color:#66d9ef">int</span> u, <span style="color:#66d9ef">int</span> v, <span style="color:#66d9ef">int</span> d) <span style="color:#f92672">:</span> from(u), to(v), dis(d)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// nothing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> n;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> fa[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nums[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> dp[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>][<span style="color:#ae81ff">3</span>];
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span>Edge<span style="color:#f92672">&gt;</span> edge;
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> g[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">readInt</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, f <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">||</span> ch <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (ch <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            f <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">&amp;&amp;</span> ch <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> ch <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>;
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> f;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">write</span>(<span style="color:#66d9ef">int</span> x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        putchar(<span style="color:#e6db74">&#39;-&#39;</span>), x <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>x;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        write(x <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    putchar(x <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> u, <span style="color:#66d9ef">int</span> v, <span style="color:#66d9ef">int</span> d)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    edge.push_back(Edge(u, v, d));
</span></span><span style="display:flex;"><span>    g[u].push_back(edge.size() <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">dfs</span>(<span style="color:#66d9ef">int</span> x,<span style="color:#66d9ef">int</span> father)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	fa[x]<span style="color:#f92672">=</span>father;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span>g[x].size();i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>edge[g[x][i]].to;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(fa[v]<span style="color:#f92672">==-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			dfs(v,x);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">solve</span>(<span style="color:#66d9ef">int</span> x,<span style="color:#66d9ef">int</span> k)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(dp[x][k]<span style="color:#f92672">!=-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> dp[x][k];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	dp[x][k]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(k<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span>g[x].size();i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>edge[g[x][i]].to;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span>(fa[v]<span style="color:#f92672">==</span>x)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				dp[x][k]<span style="color:#f92672">+=</span>solve(v,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		dp[x][k]<span style="color:#f92672">+=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span>g[x].size();i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>edge[g[x][i]].to;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span>(fa[v]<span style="color:#f92672">==</span>x)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				dp[x][k]<span style="color:#f92672">+=</span>min(solve(v,<span style="color:#ae81ff">0</span>),solve(v,<span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> dp[x][k];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	memset(dp,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#66d9ef">sizeof</span>(dp));
</span></span><span style="display:flex;"><span>	memset(fa,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#66d9ef">sizeof</span>(fa));
</span></span><span style="display:flex;"><span>    n<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    	<span style="color:#66d9ef">int</span> id,k;
</span></span><span style="display:flex;"><span>    	id<span style="color:#f92672">=</span>readInt(),k<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>    	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> j<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;j<span style="color:#f92672">&lt;=</span>k;j<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    	{
</span></span><span style="display:flex;"><span>    		<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>    		add(id,v,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    		add(v,id,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	dfs(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>	write(min(solve(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>),solve(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>)));
</span></span><span style="display:flex;"><span>	putchar(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">//	write(root);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	putchar(&#39;\n&#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	for(int i=1;i&lt;=n;i++)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	{
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		write(solve(i,0));
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		putchar(&#39; &#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	putchar(&#39;\n&#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	for(int i=1;i&lt;=n;i++)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	{
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		write(solve(i,1));
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		putchar(&#39; &#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	putchar(&#39;\n&#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>解题报告：P8159 数字转换</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8159-%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/</link>
            <pubDate>Sun, 23 Apr 2023 10:23:34 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8159-%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/</guid>
            <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 首先预处理出每个数字的约数，比较大小，建图
则问题转换为无根树上的最长链问题
首先任意选取结点，以该结点为根进行 dfs，将无根树转有根树
则以 $dp[i][1]$ 表示以 $i$ 到以 $i$ 为根的子树的叶结点的最长距离，$dp[i][2]$ 表示次长距离，则树上的最长链显然等于：
$$ans=\max \limits_{i \in map} \lbrace dp[i][1]+dp[i][2] \rbrace$$
状态转移方程分为两种情况：
$dp[e.to][1] + e.dis &amp;gt; dp[i][1]$（$e \in g[i]$）时，令 $dp[i][2]=dp[i][1]$，$dp[i][1]=dp[e.to][1] + e.dis$ $dp[i][1] &amp;gt; dp[e.to][1] + e.dis &amp;gt; dp[i][2]$（$e \in g[i]$）时，令 $dp[i][2]=dp[e.to][1] + e.dis$ 代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN=50000; struct Edge { int from; int to; int dis; Edge(int u, int v, int d) : from(u), to(v), dis(d) { // nothing } }; int ans; int n; int fa[MAXN+5]; int dp[MAXN+5][3]; int sum[MAXN+5]; vector&amp;lt;Edge&amp;gt; edge; vector&amp;lt;int&amp;gt; g[MAXN+5]; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } void add(int u, int v, int d) { edge.</description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://192.168.22.60:9998/d/C0006/p/P8159?tid=643ba5af6f36ff40bf27ca3e">许昌高中高级OJ（内网）</a>，<a href="http://www.xcschool.com:9998/d/C0006/p/P8159?tid=643ba5af6f36ff40bf27ca3e">许昌高中高级OJ（外网）</a>，<a href="https://loj.ac/p/10155">LibreOJ</a></p>
<h2 id="思路">思路</h2>
<p>首先预处理出每个数字的约数，比较大小，建图</p>
<p>则问题转换为无根树上的最长链问题</p>
<p>首先任意选取结点，以该结点为根进行 dfs，将无根树转有根树</p>
<p>则以 $dp[i][1]$ 表示以 $i$ 到以 $i$ 为根的子树的叶结点的最长距离，$dp[i][2]$ 表示次长距离，则树上的最长链显然等于：</p>
<p>$$ans=\max \limits_{i \in map} \lbrace dp[i][1]+dp[i][2] \rbrace$$</p>
<p>状态转移方程分为两种情况：</p>
<ul>
<li>$dp[e.to][1] + e.dis &gt; dp[i][1]$（$e \in g[i]$）时，令 $dp[i][2]=dp[i][1]$，$dp[i][1]=dp[e.to][1] + e.dis$</li>
<li>$dp[i][1] &gt; dp[e.to][1] + e.dis &gt; dp[i][2]$（$e \in g[i]$）时，令 $dp[i][2]=dp[e.to][1] + e.dis$</li>
</ul>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> MAXN<span style="color:#f92672">=</span><span style="color:#ae81ff">50000</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Edge</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> from;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> to;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> dis;
</span></span><span style="display:flex;"><span>    Edge(<span style="color:#66d9ef">int</span> u, <span style="color:#66d9ef">int</span> v, <span style="color:#66d9ef">int</span> d) <span style="color:#f92672">:</span> from(u), to(v), dis(d)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// nothing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> ans;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> n;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> fa[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> dp[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>][<span style="color:#ae81ff">3</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> sum[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span>Edge<span style="color:#f92672">&gt;</span> edge;
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> g[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">readInt</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, f <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">||</span> ch <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (ch <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            f <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">&amp;&amp;</span> ch <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> ch <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>;
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> f;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">write</span>(<span style="color:#66d9ef">int</span> x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        putchar(<span style="color:#e6db74">&#39;-&#39;</span>), x <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>x;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        write(x <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    putchar(x <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> u, <span style="color:#66d9ef">int</span> v, <span style="color:#66d9ef">int</span> d)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    edge.push_back(Edge(u, v, d));
</span></span><span style="display:flex;"><span>    g[u].push_back(edge.size() <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">init</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> j<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;j<span style="color:#f92672">&lt;=</span>n<span style="color:#f92672">/</span>i;j<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			sum[i<span style="color:#f92672">*</span>j]<span style="color:#f92672">+=</span>i;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(sum[i]<span style="color:#f92672">&lt;</span>i)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			add(sum[i],i,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>			add(i,sum[i],<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">dfs</span>(<span style="color:#66d9ef">int</span> x,<span style="color:#66d9ef">int</span> father)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	fa[x]<span style="color:#f92672">=</span>father;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span>g[x].size();i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>edge[g[x][i]].to;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>fa[v])
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			dfs(v,x);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">solve</span>(<span style="color:#66d9ef">int</span> x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(dp[x][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">!=-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> dp[x][<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	dp[x][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	dp[x][<span style="color:#ae81ff">2</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span>g[x].size();i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		Edge e<span style="color:#f92672">=</span>edge[g[x][i]];
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>edge[g[x][i]].to;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(fa[v]<span style="color:#f92672">==</span>x)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span>((solve(v)<span style="color:#f92672">+</span>e.dis)<span style="color:#f92672">&gt;</span>dp[x][<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				dp[x][<span style="color:#ae81ff">2</span>]<span style="color:#f92672">=</span>dp[x][<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>				dp[x][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span>solve(v)<span style="color:#f92672">+</span>e.dis;
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(solve(v)<span style="color:#f92672">+</span>e.dis<span style="color:#f92672">&gt;</span>dp[x][<span style="color:#ae81ff">2</span>])
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				dp[x][<span style="color:#ae81ff">2</span>]<span style="color:#f92672">=</span>solve(v)<span style="color:#f92672">+</span>e.dis;
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> dp[x][<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	memset(dp,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#66d9ef">sizeof</span>(dp));
</span></span><span style="display:flex;"><span>    n<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>    ans<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    init();
</span></span><span style="display:flex;"><span>    dfs(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    	solve(i);
</span></span><span style="display:flex;"><span>    	ans<span style="color:#f92672">=</span>max(ans,dp[i][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span>dp[i][<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	write(ans);
</span></span><span style="display:flex;"><span>	putchar(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>解题报告：P8167 没有上司的舞会</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8167-%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A/</link>
            <pubDate>Sun, 23 Apr 2023 09:24:42 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8167-%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A/</guid>
            <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），洛谷
思路 定义状态：$dp[i][j]$ 表示以 $i$ 为根的子树当 $i$ 处于 $j$ 状态时的最大快乐指数（ $j=0$ 表示 $i$ 不来，$j=1$ 则表示 $i$ 来）
状态转移方程：
$$dp[i][j]= \begin{cases} \sum \limits_{k \in i.son} max \lbrace dp[k][0], dp[k][1] \rbrace,&amp;amp; (j=0), \newline \sum \limits_{k \in i.son} dp[k][0] ,&amp;amp; (j=1) \end{cases} $$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN=6000; struct Edge { int from; int to; int dis; Edge(int u, int v, int d) : from(u), to(v), dis(d) { // nothing } }; int n,q; int root; int vis[MAXN+5]; int nums[MAXN+5]; int dp[MAXN+5][3]; vector&amp;lt;Edge&amp;gt; edge; vector&amp;lt;int&amp;gt; g[MAXN+5]; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } void add(int u, int v, int d) { edge.</description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://192.168.22.60:9998/d/C0006/p/P8167?tid=643ba5af6f36ff40bf27ca3e">许昌高中高级OJ（内网）</a>，<a href="http://www.xcschool.com:9998/d/C0006/p/P8167?tid=643ba5af6f36ff40bf27ca3e">许昌高中高级OJ（外网）</a>，<a href="https://www.luogu.com.cn/problem/P1352">洛谷</a></p>
<h2 id="思路">思路</h2>
<p>定义状态：$dp[i][j]$ 表示以 $i$ 为根的子树当 $i$ 处于 $j$ 状态时的最大快乐指数（ $j=0$ 表示 $i$ 不来，$j=1$ 则表示 $i$ 来）</p>
<p>状态转移方程：</p>
<p>$$dp[i][j]=
\begin{cases}
\sum \limits_{k \in i.son} max \lbrace dp[k][0], dp[k][1] \rbrace,&amp; (j=0), \newline
\sum \limits_{k \in i.son} dp[k][0] ,&amp; (j=1)
\end{cases}
$$</p>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> MAXN<span style="color:#f92672">=</span><span style="color:#ae81ff">6000</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Edge</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> from;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> to;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> dis;
</span></span><span style="display:flex;"><span>    Edge(<span style="color:#66d9ef">int</span> u, <span style="color:#66d9ef">int</span> v, <span style="color:#66d9ef">int</span> d) <span style="color:#f92672">:</span> from(u), to(v), dis(d)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// nothing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> n,q;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> root;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> vis[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nums[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> dp[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>][<span style="color:#ae81ff">3</span>];
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span>Edge<span style="color:#f92672">&gt;</span> edge;
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> g[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">readInt</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, f <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">||</span> ch <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (ch <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            f <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">&amp;&amp;</span> ch <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> ch <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>;
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> f;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">write</span>(<span style="color:#66d9ef">int</span> x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        putchar(<span style="color:#e6db74">&#39;-&#39;</span>), x <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>x;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        write(x <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    putchar(x <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> u, <span style="color:#66d9ef">int</span> v, <span style="color:#66d9ef">int</span> d)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    edge.push_back(Edge(u, v, d));
</span></span><span style="display:flex;"><span>    g[u].push_back(edge.size() <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">solve</span>(<span style="color:#66d9ef">int</span> x,<span style="color:#66d9ef">int</span> k)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(dp[x][k]<span style="color:#f92672">!=-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> dp[x][k];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	dp[x][k]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(k<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		dp[x][k]<span style="color:#f92672">+=</span>nums[x];
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span>g[x].size();i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>edge[g[x][i]].to;
</span></span><span style="display:flex;"><span>			dp[x][k]<span style="color:#f92672">+=</span>solve(v,<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span>g[x].size();i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>edge[g[x][i]].to;
</span></span><span style="display:flex;"><span>			dp[x][k]<span style="color:#f92672">+=</span>max(solve(v,<span style="color:#ae81ff">0</span>),solve(v,<span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> dp[x][k];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	memset(dp,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#66d9ef">sizeof</span>(dp));
</span></span><span style="display:flex;"><span>    n<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    	nums[i]<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">int</span> u,v;
</span></span><span style="display:flex;"><span>		u<span style="color:#f92672">=</span>readInt(),v<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>		add(v,u,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>		vis[u]<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	readInt(),readInt();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(vis[i]<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			root<span style="color:#f92672">=</span>i;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	write(max(solve(root,<span style="color:#ae81ff">0</span>),solve(root,<span style="color:#ae81ff">1</span>)));
</span></span><span style="display:flex;"><span><span style="color:#75715e">//	write(root);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	putchar(&#39;\n&#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	for(int i=1;i&lt;=n;i++)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	{
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		write(solve(i,0));
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		putchar(&#39; &#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	putchar(&#39;\n&#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	for(int i=1;i&lt;=n;i++)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	{
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		write(solve(i,1));
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		putchar(&#39; &#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	putchar(&#39;\n&#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>解题报告：P8158 选课</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8158-%E9%80%89%E8%AF%BE/</link>
            <pubDate>Sun, 23 Apr 2023 09:03:39 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8158-%E9%80%89%E8%AF%BE/</guid>
            <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 本题使用树状dp解决：
首先将无根树转有根树（虚拟一个 $0$ 号结点，为所有结点的父亲，这样同时也避免了输入时的特殊情况处理）
定义状态：
$dp[i][j]$ 表示以 $i$ 为根的子树上选 $j$ 门课可以得到的最大学分
状态转移方程：
$$dp[i][j]=\max_{\sum\limits_{m=1}\limits^{|i.son|}k_m = j-1} \lbrace \sum\limits_{m=1}\limits^{|i.son|}dp[i.son_m][k_m] \rbrace + nums[i]$$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN=300; struct Edge { int from; int to; int dis; Edge(int u, int v, int d) : from(u), to(v), dis(d) { // nothing } }; int n,q; int nums[MAXN+5]; int dp[MAXN+5][MAXN+5]; vector&amp;lt;Edge&amp;gt; edge; vector&amp;lt;int&amp;gt; g[MAXN+5]; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } void add(int u, int v, int d) { edge.</description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://192.168.22.60:9998/d/C0006/p/P8158?tid=643ba5af6f36ff40bf27ca3e">许昌高中高级OJ（内网）</a>，<a href="http://www.xcschool.com:9998/d/C0006/p/P8158?tid=643ba5af6f36ff40bf27ca3e">许昌高中高级OJ（外网）</a>，<a href="https://loj.ac/p/10154">LibreOJ</a></p>
<h2 id="思路">思路</h2>
<p>本题使用树状dp解决：</p>
<p>首先将无根树转有根树（虚拟一个 $0$ 号结点，为所有结点的父亲，这样同时也避免了输入时的特殊情况处理）</p>
<p>定义状态：</p>
<p>$dp[i][j]$ 表示以 $i$ 为根的子树上选 $j$ 门课可以得到的最大学分</p>
<p>状态转移方程：</p>
<p>$$dp[i][j]=\max_{\sum\limits_{m=1}\limits^{|i.son|}k_m = j-1} \lbrace \sum\limits_{m=1}\limits^{|i.son|}dp[i.son_m][k_m] \rbrace + nums[i]$$</p>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> MAXN<span style="color:#f92672">=</span><span style="color:#ae81ff">300</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Edge</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> from;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> to;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> dis;
</span></span><span style="display:flex;"><span>    Edge(<span style="color:#66d9ef">int</span> u, <span style="color:#66d9ef">int</span> v, <span style="color:#66d9ef">int</span> d) <span style="color:#f92672">:</span> from(u), to(v), dis(d)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// nothing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> n,q;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nums[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> dp[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>][MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span>Edge<span style="color:#f92672">&gt;</span> edge;
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> g[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">readInt</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, f <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">||</span> ch <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (ch <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            f <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">&amp;&amp;</span> ch <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> ch <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>;
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> f;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">write</span>(<span style="color:#66d9ef">int</span> x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        putchar(<span style="color:#e6db74">&#39;-&#39;</span>), x <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>x;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        write(x <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    putchar(x <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> u, <span style="color:#66d9ef">int</span> v, <span style="color:#66d9ef">int</span> d)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    edge.push_back(Edge(u, v, d));
</span></span><span style="display:flex;"><span>    g[u].push_back(edge.size() <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">solve</span>(<span style="color:#66d9ef">int</span> x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	dp[x][<span style="color:#ae81ff">0</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span>g[x].size();i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">int</span> v<span style="color:#f92672">=</span>edge[g[x][i]].to;
</span></span><span style="display:flex;"><span>		solve(v);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> j<span style="color:#f92672">=</span>q;j<span style="color:#f92672">&gt;=</span><span style="color:#ae81ff">0</span>;j<span style="color:#f92672">--</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> k<span style="color:#f92672">=</span>j;k<span style="color:#f92672">&gt;=</span><span style="color:#ae81ff">0</span>;k<span style="color:#f92672">--</span>)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				dp[x][j]<span style="color:#f92672">=</span>max(dp[x][j],dp[x][j<span style="color:#f92672">-</span>k]<span style="color:#f92672">+</span>dp[v][k]);
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(x<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> j<span style="color:#f92672">=</span>q;j<span style="color:#f92672">&gt;=</span><span style="color:#ae81ff">1</span>;j<span style="color:#f92672">--</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			dp[x][j]<span style="color:#f92672">=</span>dp[x][j<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span>nums[x];
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	memset(dp,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#66d9ef">sizeof</span>(dp));
</span></span><span style="display:flex;"><span>    n<span style="color:#f92672">=</span>readInt(),q<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    	<span style="color:#66d9ef">int</span> from,to,dis;
</span></span><span style="display:flex;"><span>    	from<span style="color:#f92672">=</span>readInt(),to<span style="color:#f92672">=</span>i,dis<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>    	nums[to]<span style="color:#f92672">=</span>dis;
</span></span><span style="display:flex;"><span>		add(from,to,dis);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	solve(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>	write(dp[<span style="color:#ae81ff">0</span>][q]);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>解题报告：P8157 二叉苹果树</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8157-%E4%BA%8C%E5%8F%89%E8%8B%B9%E6%9E%9C%E6%A0%91/</link>
            <pubDate>Sun, 23 Apr 2023 08:50:58 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8157-%E4%BA%8C%E5%8F%89%E8%8B%B9%E6%9E%9C%E6%A0%91/</guid>
            <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 题目中说要求保留 $Q$ 个树枝，等价于保留 $Q+1$ 个结点，而每个树枝上的苹果树可以看为其连接着的儿子上的苹果，则题目转化为：给定一棵已知的二叉树，保留 $Q+1$ 个结点，求所保留的结点的最大权值和
则本题可以使用dp求解，定义 $dp[i][j]$ 表示以 $i$ 为树根的子树上保留 $j$ 个结点时的最大权值和
状态转移方程为：
$$dp[i][j]=max \lbrace dp[i.lson][k]+dp[i.rson][j-k-1]+nums[i] \rbrace, k \in [0,j-1]$$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN=100; struct Edge { int from; int to; int dis; Edge(int u, int v, int d) : from(u), to(v), dis(d) { // nothing } }; int n,q; int nums[MAXN+5]; int dp[MAXN+5][MAXN+5]; vector&amp;lt;Edge&amp;gt; edge; vector&amp;lt;int&amp;gt; g[MAXN+5]; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } void add(int u, int v, int d) { edge.</description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://192.168.22.60:9998/d/C0006/p/P8157?tid=643ba5af6f36ff40bf27ca3e">许昌高中高级OJ（内网）</a>，<a href="http://www.xcschool.com:9998/d/C0006/p/P8157?tid=643ba5af6f36ff40bf27ca3e">许昌高中高级OJ（外网）</a>，<a href="https://loj.ac/p/10153">LibreOJ</a></p>
<h2 id="思路">思路</h2>
<p>题目中说要求保留 $Q$ 个树枝，等价于保留 $Q+1$ 个结点，而每个树枝上的苹果树可以看为其连接着的儿子上的苹果，则题目转化为：给定一棵已知的二叉树，保留 $Q+1$ 个结点，求所保留的结点的最大权值和</p>
<p>则本题可以使用dp求解，定义 $dp[i][j]$ 表示以 $i$ 为树根的子树上保留 $j$ 个结点时的最大权值和</p>
<p>状态转移方程为：</p>
<p>$$dp[i][j]=max \lbrace dp[i.lson][k]+dp[i.rson][j-k-1]+nums[i] \rbrace, k \in [0,j-1]$$</p>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> MAXN<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Edge</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> from;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> to;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> dis;
</span></span><span style="display:flex;"><span>    Edge(<span style="color:#66d9ef">int</span> u, <span style="color:#66d9ef">int</span> v, <span style="color:#66d9ef">int</span> d) <span style="color:#f92672">:</span> from(u), to(v), dis(d)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// nothing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> n,q;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nums[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> dp[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>][MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span>Edge<span style="color:#f92672">&gt;</span> edge;
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> g[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">readInt</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, f <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">||</span> ch <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (ch <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            f <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">&amp;&amp;</span> ch <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> ch <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>;
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> f;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">write</span>(<span style="color:#66d9ef">int</span> x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        putchar(<span style="color:#e6db74">&#39;-&#39;</span>), x <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>x;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        write(x <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    putchar(x <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> u, <span style="color:#66d9ef">int</span> v, <span style="color:#66d9ef">int</span> d)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    edge.push_back(Edge(u, v, d));
</span></span><span style="display:flex;"><span>    g[u].push_back(edge.size() <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">solve</span>(<span style="color:#66d9ef">int</span> x,<span style="color:#66d9ef">int</span> k)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(k<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> dp[x][k]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(k<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> dp[x][k]<span style="color:#f92672">=</span>nums[x];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(g[x].size()<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> dp[x][k]<span style="color:#f92672">=</span>nums[x];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(dp[x][k]<span style="color:#f92672">!=-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> dp[x][k];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> lson,rson;
</span></span><span style="display:flex;"><span>	lson<span style="color:#f92672">=</span>edge[g[x][<span style="color:#ae81ff">0</span>]].to;
</span></span><span style="display:flex;"><span>	rson<span style="color:#f92672">=</span>edge[g[x][<span style="color:#ae81ff">1</span>]].to;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;=</span>k<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		dp[x][k]<span style="color:#f92672">=</span>max(dp[x][k],solve(lson,i)<span style="color:#f92672">+</span>solve(rson,k<span style="color:#f92672">-</span>i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">+</span>nums[x]);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> dp[x][k];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	memset(dp,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#66d9ef">sizeof</span>(dp));
</span></span><span style="display:flex;"><span>    n<span style="color:#f92672">=</span>readInt(),q<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    	<span style="color:#66d9ef">int</span> from,to,dis;
</span></span><span style="display:flex;"><span>    	from<span style="color:#f92672">=</span>readInt(),to<span style="color:#f92672">=</span>readInt(),dis<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>    	<span style="color:#66d9ef">if</span>(nums[to]<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    	{
</span></span><span style="display:flex;"><span>    		nums[to]<span style="color:#f92672">=</span>dis;
</span></span><span style="display:flex;"><span>			add(from,to,dis);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>    	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    	{
</span></span><span style="display:flex;"><span>    		nums[from]<span style="color:#f92672">=</span>dis;
</span></span><span style="display:flex;"><span>			add(to,from,dis);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	write(solve(<span style="color:#ae81ff">1</span>,q<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span><span style="color:#75715e">//	for(int i=1;i&lt;=n;i++)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	{
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		for(int j=0;j&lt;=q+1;j++)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		{
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//			write(solve(i,j));
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//			putchar(&#39; &#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//		putchar(&#39;\n&#39;);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//	}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>解题报告：P8155 分离与合体</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8155-%E5%88%86%E7%A6%BB%E4%B8%8E%E5%90%88%E4%BD%93/</link>
            <pubDate>Sat, 22 Apr 2023 17:19:54 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8155-%E5%88%86%E7%A6%BB%E4%B8%8E%E5%90%88%E4%BD%93/</guid>
            <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 定义状态：
$dp[i][j]$ 为从 $i$ 合并至 $j$ 所得到的最大得分
状态转移：
$$dp[i][j]=max \lbrace dp[i][k]+dp[k+1][j]+(num[i]+num[j])*num[k] \rbrace, k \in [i,j-1]$$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 300; typedef __int128 LL; LL n; LL len; LL flag; LL num[MAXN+5]; LL dp[MAXN+5][MAXN+5][2]; LL vis[MAXN+5]; inline LL readLL() { LL res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeLL(LL x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeLL(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } void bfs(LL l,LL r,LL step) { if(l&amp;gt;=r || l==-1 || r==-1) { return; } if(step==len) { flag=1; writeLL(dp[l][r][2]); putchar(&amp;#39; &amp;#39;); return; } bfs(l,dp[l][r][2],step+1); bfs(dp[l][r][2]+1,r,step+1); } void printans() { flag=1; len=1; while(flag) { flag=0; bfs(1,n,1); len++; } } LL solve(LL l,LL r) { if(l==r) { return dp[l][r][1]=0; } if(dp[l][r][1]!</description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://192.168.22.60:9998/d/C0006/p/P8155?tid=643b39b16f36ff40bf27c360">许昌高中高级OJ（内网）</a>，<a href="http://www.xcschool.com:9998/d/C0006/p/P8155?tid=643b39b16f36ff40bf27c360">许昌高中高级OJ（外网）</a>，<a href="https://loj.ac/p/10151">LibreOJ</a></p>
<h2 id="思路">思路</h2>
<p>定义状态：</p>
<p>$dp[i][j]$ 为从 $i$ 合并至 $j$ 所得到的最大得分</p>
<p>状态转移：</p>
<p>$$dp[i][j]=max \lbrace dp[i][k]+dp[k+1][j]+(num[i]+num[j])*num[k] \rbrace,  k \in [i,j-1]$$</p>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> MAXN <span style="color:#f92672">=</span> <span style="color:#ae81ff">300</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> __int128 LL;
</span></span><span style="display:flex;"><span>LL n;
</span></span><span style="display:flex;"><span>LL len;
</span></span><span style="display:flex;"><span>LL flag;
</span></span><span style="display:flex;"><span>LL num[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span>LL dp[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>][MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>][<span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>LL vis[MAXN<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> LL <span style="color:#a6e22e">readLL</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	LL res<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>,k<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> ch;
</span></span><span style="display:flex;"><span>	ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>(ch<span style="color:#f92672">&lt;</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">||</span>ch<span style="color:#f92672">&gt;</span><span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(ch<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>			k<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>		ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>(ch<span style="color:#f92672">&gt;=</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">&amp;&amp;</span>ch<span style="color:#f92672">&lt;=</span><span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>		res<span style="color:#f92672">*=</span><span style="color:#ae81ff">10</span>,res<span style="color:#f92672">+=</span>ch<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;0&#39;</span>,ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> k<span style="color:#f92672">*</span>res;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">writeLL</span>(LL x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(x<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>		putchar(<span style="color:#e6db74">&#39;-&#39;</span>),x<span style="color:#f92672">=-</span>x;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(x<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>		writeLL(x<span style="color:#f92672">/</span><span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>	putchar(x<span style="color:#f92672">%</span><span style="color:#ae81ff">10</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">bfs</span>(LL l,LL r,LL step)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(l<span style="color:#f92672">&gt;=</span>r <span style="color:#f92672">||</span> l<span style="color:#f92672">==-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">||</span> r<span style="color:#f92672">==-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(step<span style="color:#f92672">==</span>len)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		flag<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>		writeLL(dp[l][r][<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>		putchar(<span style="color:#e6db74">&#39; &#39;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	bfs(l,dp[l][r][<span style="color:#ae81ff">2</span>],step<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>	bfs(dp[l][r][<span style="color:#ae81ff">2</span>]<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>,r,step<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">printans</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	flag<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	len<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>(flag)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		flag<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>		bfs(<span style="color:#ae81ff">1</span>,n,<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>		len<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>LL <span style="color:#a6e22e">solve</span>(LL l,LL r)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(l<span style="color:#f92672">==</span>r)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> dp[l][r][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(dp[l][r][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">!=-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> dp[l][r][<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(LL k<span style="color:#f92672">=</span>l;k<span style="color:#f92672">&lt;</span>r;k<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(vis[k]<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			vis[k]<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span>((dp[l][r][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">&lt;</span>solve(l,k)<span style="color:#f92672">+</span>solve(k<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>,r)<span style="color:#f92672">+</span>(num[l]<span style="color:#f92672">+</span>num[r])<span style="color:#f92672">*</span>num[k]))
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				dp[l][r][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span>solve(l,k)<span style="color:#f92672">+</span>solve(k<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>,r)<span style="color:#f92672">+</span>(num[l]<span style="color:#f92672">+</span>num[r])<span style="color:#f92672">*</span>num[k];
</span></span><span style="display:flex;"><span>				dp[l][r][<span style="color:#ae81ff">2</span>]<span style="color:#f92672">=</span>k;
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		vis[k]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> dp[l][r][<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	memset(dp,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#66d9ef">sizeof</span>(dp));
</span></span><span style="display:flex;"><span>	n<span style="color:#f92672">=</span>readLL();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(LL i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		num[i]<span style="color:#f92672">=</span>readLL();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(LL i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		dp[i][i][<span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	writeLL(solve(<span style="color:#ae81ff">1</span>,n));
</span></span><span style="display:flex;"><span>	putchar(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>	printans();
</span></span><span style="display:flex;"><span>	putchar(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>解题报告：P8154 括号配对</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8154-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/</link>
            <pubDate>Sat, 22 Apr 2023 17:02:01 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8154-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/</guid>
            <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 定义状态：$dp[i][j]$ 表示从 $i$ 到 $j$ 所需要的最少添加字符数
显然，添加字符数等于去掉多少个字符后该字符串符合要求的最少字符数
则可得状态转移方程：
$$ dp[i][j]= \begin{cases} min\lbrace dp[i+1][j-1],dp[i][k]+dp[k+1][j]\rbrace (k \in (i,j]), &amp;amp;(check(str[i-1],str[j-1])=true), \newline min\lbrace dp[i][k]+dp[k+1][j]\rbrace (k \in (i,j]), &amp;amp;(check(str[i-1],str[j-1])=false) \end{cases} $$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 200; typedef long long LL; LL n; LL ans; string str; LL dp[MAXN*2+5][MAXN*2+5]; inline LL readLL() { LL res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeLL(LL x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeLL(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } bool check(char a,char b) { return (a==&amp;#39;(&amp;#39;&amp;amp;&amp;amp;b==&amp;#39;)&amp;#39;)||(a==&amp;#39;[&amp;#39;&amp;amp;&amp;amp;b==&amp;#39;]&amp;#39;); } int main() { memset(dp,0x3f,sizeof(dp)); cin &amp;gt;&amp;gt; str; n=str.</description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://192.168.22.60:9998/d/C0006/p/P8154?tid=643b39b16f36ff40bf27c360">许昌高中高级OJ（内网）</a>，<a href="http://www.xcschool.com:9998/d/C0006/p/P8154?tid=643b39b16f36ff40bf27c360">许昌高中高级OJ（外网）</a>，<a href="https://loj.ac/p/10150">LibreOJ</a></p>
<h2 id="思路">思路</h2>
<p>定义状态：$dp[i][j]$ 表示从 $i$ 到 $j$ 所需要的最少添加字符数</p>
<p>显然，添加字符数等于<strong>去掉多少个字符后该字符串符合要求的最少字符数</strong></p>
<p>则可得状态转移方程：</p>
<p>$$
dp[i][j]=
\begin{cases}
min\lbrace dp[i+1][j-1],dp[i][k]+dp[k+1][j]\rbrace (k \in (i,j]), &amp;(check(str[i-1],str[j-1])=true), \newline
min\lbrace dp[i][k]+dp[k+1][j]\rbrace (k \in (i,j]), &amp;(check(str[i-1],str[j-1])=false)
\end{cases}
$$</p>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> MAXN <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> LL;
</span></span><span style="display:flex;"><span>LL n;
</span></span><span style="display:flex;"><span>LL ans;
</span></span><span style="display:flex;"><span>string str;
</span></span><span style="display:flex;"><span>LL dp[MAXN<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>][MAXN<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> LL <span style="color:#a6e22e">readLL</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	LL res<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>,k<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> ch;
</span></span><span style="display:flex;"><span>	ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>(ch<span style="color:#f92672">&lt;</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">||</span>ch<span style="color:#f92672">&gt;</span><span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(ch<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>			k<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>		ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>(ch<span style="color:#f92672">&gt;=</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">&amp;&amp;</span>ch<span style="color:#f92672">&lt;=</span><span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>		res<span style="color:#f92672">*=</span><span style="color:#ae81ff">10</span>,res<span style="color:#f92672">+=</span>ch<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;0&#39;</span>,ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> k<span style="color:#f92672">*</span>res;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">writeLL</span>(LL x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(x<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>		putchar(<span style="color:#e6db74">&#39;-&#39;</span>),x<span style="color:#f92672">=-</span>x;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(x<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>		writeLL(x<span style="color:#f92672">/</span><span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>	putchar(x<span style="color:#f92672">%</span><span style="color:#ae81ff">10</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">check</span>(<span style="color:#66d9ef">char</span> a,<span style="color:#66d9ef">char</span> b)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> (a<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;(&#39;</span><span style="color:#f92672">&amp;&amp;</span>b<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;)&#39;</span>)<span style="color:#f92672">||</span>(a<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;[&#39;</span><span style="color:#f92672">&amp;&amp;</span>b<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;]&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	memset(dp,<span style="color:#ae81ff">0x3f</span>,<span style="color:#66d9ef">sizeof</span>(dp));
</span></span><span style="display:flex;"><span>	cin <span style="color:#f92672">&gt;&gt;</span> str;
</span></span><span style="display:flex;"><span>	n<span style="color:#f92672">=</span>str.size();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		dp[i][i]<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>		dp[i][i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span>dp[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>][i]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> l<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;l<span style="color:#f92672">&lt;=</span>n;l<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n<span style="color:#f92672">-</span>l<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> j<span style="color:#f92672">=</span>i<span style="color:#f92672">+</span>l<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span>(check(str[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],str[j<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				dp[i][j]<span style="color:#f92672">=</span>min(dp[i][j],dp[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>][j<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> k<span style="color:#f92672">=</span>i;k<span style="color:#f92672">&lt;</span>j;k<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				dp[i][j]<span style="color:#f92672">=</span>min(dp[i][j],dp[i][k]<span style="color:#f92672">+</span>dp[k<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>][j]);
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	writeLL(dp[<span style="color:#ae81ff">1</span>][n]);
</span></span><span style="display:flex;"><span>	putchar(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>解题报告：P8153 凸多边形的划分</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8153-%E5%87%B8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%9A%84%E5%88%92%E5%88%86/</link>
            <pubDate>Sat, 22 Apr 2023 16:37:01 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8153-%E5%87%B8%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%9A%84%E5%88%92%E5%88%86/</guid>
            <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 定义状态：$dp[i][j]$ 表示从 $i$ 合并到 $j$ 所需要的最少权值和，则可得：
$$dp[i][j]=min \lbrace dp[i][k]+dp[k][j]+num[i]*num[j]*num[k],k \in (i,j) \rbrace$$
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 50; typedef __int128 LL; LL n; LL ans; LL num[MAXN*2+5]; LL dp[MAXN*2+5][MAXN*2+5]; inline LL readLL() { LL res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeLL(LL x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeLL(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } int main() { ans=0x3f3f3f3f; memset(dp,0x3f,sizeof(dp)); n=readLL(); for(LL i=1;i&amp;lt;=n;i++) { num[i]=readLL(); } for(LL i=n+1;i&amp;lt;=2*n;i++) { num[i]=num[i-n]; } for(LL i=1;i&amp;lt;=2*n;i++) { dp[i][i+1]=0; } for(LL l=3;l&amp;lt;=2*n;l++) { for(LL i=1;i&amp;lt;=2*n-l+1;i++) { int j=i+l-1; for(LL k=i+1;k&amp;lt;j;k++) { dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j]+num[i]*num[j]*num[k]); } } } ans=dp[1][n]; writeLL(ans); putchar(&amp;#39;\n&amp;#39;); } </description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://192.168.22.60:9998/d/C0006/p/162?tid=643b39b16f36ff40bf27c360">许昌高中高级OJ（内网）</a>，<a href="http://www.xcschool.com:9998/d/C0006/p/162?tid=643b39b16f36ff40bf27c360">许昌高中高级OJ（外网）</a>，<a href="https://loj.ac/p/10149">LibreOJ</a></p>
<h2 id="思路">思路</h2>
<p>定义状态：$dp[i][j]$ 表示从 $i$ 合并到 $j$ 所需要的最少权值和，则可得：</p>
<p>$$dp[i][j]=min \lbrace dp[i][k]+dp[k][j]+num[i]*num[j]*num[k],k \in (i,j) \rbrace$$</p>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> MAXN <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> __int128 LL;
</span></span><span style="display:flex;"><span>LL n;
</span></span><span style="display:flex;"><span>LL ans;
</span></span><span style="display:flex;"><span>LL num[MAXN<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span>LL dp[MAXN<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>][MAXN<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> LL <span style="color:#a6e22e">readLL</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	LL res<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>,k<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> ch;
</span></span><span style="display:flex;"><span>	ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>(ch<span style="color:#f92672">&lt;</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">||</span>ch<span style="color:#f92672">&gt;</span><span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(ch<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>			k<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>		ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>(ch<span style="color:#f92672">&gt;=</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">&amp;&amp;</span>ch<span style="color:#f92672">&lt;=</span><span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>		res<span style="color:#f92672">*=</span><span style="color:#ae81ff">10</span>,res<span style="color:#f92672">+=</span>ch<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;0&#39;</span>,ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> k<span style="color:#f92672">*</span>res;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">writeLL</span>(LL x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(x<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>		putchar(<span style="color:#e6db74">&#39;-&#39;</span>),x<span style="color:#f92672">=-</span>x;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(x<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>		writeLL(x<span style="color:#f92672">/</span><span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>	putchar(x<span style="color:#f92672">%</span><span style="color:#ae81ff">10</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	ans<span style="color:#f92672">=</span><span style="color:#ae81ff">0x3f3f3f3f</span>;
</span></span><span style="display:flex;"><span>	memset(dp,<span style="color:#ae81ff">0x3f</span>,<span style="color:#66d9ef">sizeof</span>(dp));
</span></span><span style="display:flex;"><span>	n<span style="color:#f92672">=</span>readLL();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(LL i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		num[i]<span style="color:#f92672">=</span>readLL();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(LL i<span style="color:#f92672">=</span>n<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		num[i]<span style="color:#f92672">=</span>num[i<span style="color:#f92672">-</span>n];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(LL i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		dp[i][i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(LL l<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>;l<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n;l<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(LL i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n<span style="color:#f92672">-</span>l<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> j<span style="color:#f92672">=</span>i<span style="color:#f92672">+</span>l<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">for</span>(LL k<span style="color:#f92672">=</span>i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;k<span style="color:#f92672">&lt;</span>j;k<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				dp[i][j]<span style="color:#f92672">=</span>min(dp[i][j],dp[i][k]<span style="color:#f92672">+</span>dp[k][j]<span style="color:#f92672">+</span>num[i]<span style="color:#f92672">*</span>num[j]<span style="color:#f92672">*</span>num[k]);
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	ans<span style="color:#f92672">=</span>dp[<span style="color:#ae81ff">1</span>][n];
</span></span><span style="display:flex;"><span>	writeLL(ans);
</span></span><span style="display:flex;"><span>	putchar(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>解题报告：P8152 能量项链</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8152-%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE/</link>
            <pubDate>Sat, 22 Apr 2023 15:50:12 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8152-%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE/</guid>
            <description>题目链接：许昌高中高级OJ（内网），许昌高中高级OJ（外网），LibreOJ
思路 区间dp，使用 $dp \lbrack i \rbrack \lbrack j \rbrack$ 表示从$i$合并到$j$所获得到的最大能量，则有：
$$dp \lbrack i \rbrack \lbrack j \rbrack = max \lbrace dp \lbrack i \rbrack \lbrack k \rbrack + dp \lbrack k+1 \rbrack \lbrack j \rbrack + nums \lbrack i \rbrack * nums \lbrack k+1 \rbrack * nums \lbrack j+1 \rbrack \rbrace , k \in \lbrack i,j \rparen $$
（$nums[i]$ 代表了 $i$ 上的头标记）
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 200; typedef __int128 LL; LL n; LL ans; LL num[MAXN*2+5]; LL dp[MAXN*2+5][MAXN*2+5]; inline LL readLL() { LL res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeLL(LL x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeLL(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } int main() { n=readLL(); for(LL i=1;i&amp;lt;=n;i++) { num[i]=readLL(); } for(LL i=n+1;i&amp;lt;=2*n;i++) { num[i]=num[i-n]; } ans=-1; memset(dp,0,sizeof(dp)); for(LL i=1;i&amp;lt;=2*n;i++) { dp[i][i]=dp[i][i]=0; } for(LL l=2;l&amp;lt;=2*n;l++) { for(LL i=1;i&amp;lt;=2*n-l+1;i++) { int j=i+l-1; for(LL k=i;k&amp;lt;j;k++) { dp[i][j]=max(dp[i][j],dp[i][k]+dp[k+1][j]+num[i]*num[k+1]*num[j+1]); } } } for(LL i=1;i&amp;lt;=n;i++) { ans=max(ans,dp[i][i+n-1]); } writeLL(ans); putchar(&amp;#39;\n&amp;#39;); } </description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://192.168.22.60:9998/d/C0006/p/P8152?tid=643b39b16f36ff40bf27c360">许昌高中高级OJ（内网）</a>，<a href="http://www.xcschool.com:9998/d/C0006/p/P8152?tid=643b39b16f36ff40bf27c360">许昌高中高级OJ（外网）</a>，<a href="https://loj.ac/p/10148">LibreOJ</a></p>
<h2 id="思路">思路</h2>
<p>区间dp，使用 $dp \lbrack i \rbrack \lbrack j \rbrack$ 表示从$i$合并到$j$所获得到的最大能量，则有：</p>
<p>$$dp \lbrack i \rbrack \lbrack j \rbrack = max \lbrace dp \lbrack i \rbrack \lbrack k \rbrack + dp \lbrack k+1 \rbrack \lbrack j \rbrack + nums \lbrack i \rbrack * nums \lbrack k+1 \rbrack * nums \lbrack j+1 \rbrack \rbrace , k \in \lbrack i,j \rparen $$</p>
<p>（$nums[i]$ 代表了 $i$ 上的头标记）</p>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> MAXN <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> __int128 LL;
</span></span><span style="display:flex;"><span>LL n;
</span></span><span style="display:flex;"><span>LL ans;
</span></span><span style="display:flex;"><span>LL num[MAXN<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span>LL dp[MAXN<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>][MAXN<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> LL <span style="color:#a6e22e">readLL</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	LL res<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>,k<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> ch;
</span></span><span style="display:flex;"><span>	ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>(ch<span style="color:#f92672">&lt;</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">||</span>ch<span style="color:#f92672">&gt;</span><span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(ch<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>			k<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>		ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>(ch<span style="color:#f92672">&gt;=</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">&amp;&amp;</span>ch<span style="color:#f92672">&lt;=</span><span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>		res<span style="color:#f92672">*=</span><span style="color:#ae81ff">10</span>,res<span style="color:#f92672">+=</span>ch<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;0&#39;</span>,ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> k<span style="color:#f92672">*</span>res;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">writeLL</span>(LL x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(x<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>		putchar(<span style="color:#e6db74">&#39;-&#39;</span>),x<span style="color:#f92672">=-</span>x;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(x<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>		writeLL(x<span style="color:#f92672">/</span><span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>	putchar(x<span style="color:#f92672">%</span><span style="color:#ae81ff">10</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	n<span style="color:#f92672">=</span>readLL();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(LL i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		num[i]<span style="color:#f92672">=</span>readLL();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(LL i<span style="color:#f92672">=</span>n<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		num[i]<span style="color:#f92672">=</span>num[i<span style="color:#f92672">-</span>n];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	ans<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	memset(dp,<span style="color:#ae81ff">0</span>,<span style="color:#66d9ef">sizeof</span>(dp));
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(LL i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		dp[i][i]<span style="color:#f92672">=</span>dp[i][i]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(LL l<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;l<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n;l<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(LL i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n<span style="color:#f92672">-</span>l<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> j<span style="color:#f92672">=</span>i<span style="color:#f92672">+</span>l<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">for</span>(LL k<span style="color:#f92672">=</span>i;k<span style="color:#f92672">&lt;</span>j;k<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				dp[i][j]<span style="color:#f92672">=</span>max(dp[i][j],dp[i][k]<span style="color:#f92672">+</span>dp[k<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>][j]<span style="color:#f92672">+</span>num[i]<span style="color:#f92672">*</span>num[k<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">*</span>num[j<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(LL i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		ans<span style="color:#f92672">=</span>max(ans,dp[i][i<span style="color:#f92672">+</span>n<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	writeLL(ans);
</span></span><span style="display:flex;"><span>	putchar(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>解题报告：P0289 【模板】扫描线</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap0289-%E6%A8%A1%E6%9D%BF%E6%89%AB%E6%8F%8F%E7%BA%BF/</link>
            <pubDate>Sun, 16 Apr 2023 09:07:12 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap0289-%E6%A8%A1%E6%9D%BF%E6%89%AB%E6%8F%8F%E7%BA%BF/</guid>
            <description>题目链接：许昌高中高级OJ
思路 将矩形面积分解为众多小矩形的面积求和，如图
则图中每个矩形面积为其底乘高，其底为相邻两个竖边的横坐标之差，高则为当前竖边的长度
这个矩形的底较为好求，首先以存储竖边的方式存储矩形，不难发现需要存储三个量：一个x坐标，两个y坐标，存储完之后按照x坐标进行排序，相邻两个边的横坐标之差即为当前矩形的底边
求高则较为麻烦，首先想象有一条与y轴平行的竖直线扫过矩形，则高即为该竖直线在矩形中的长度，那么如何求这个长度呢？
在未扫过任何矩形时，该长度为0，每扫过一个矩形的左边的边，则向该边区间的标记上增加1，每扫过一个右边的边，则向标记上减1，计算标记长度即可，在此处应使用线段树进行提速，每条边的标记长度（len）分为两种情况：
该边被完全标记（cnt=1），则标记长度即为区间长度 该边未被完全标记（cnt!=1），则标记长度即为其左子树（左半部分）标记长度加上右子树（右半部分）标记长度 接下来考虑实现，存储边可使用结构体，存储x,y1,y2坐标，以及一个k变量区分是左边还是右边，则可得出 Edge 的定义：
typedef unsigned long long ull; struct Edge { ull x; pair&amp;lt;ull, ull&amp;gt; y; ull k; Edge() : x(0), y(pair&amp;lt;ull, ull&amp;gt;(0, 0)), k(0) { // nothing } Edge(ull x_, ull y1_, ull y2_, ull k_) : x(x_), y(pair&amp;lt;ull, ull&amp;gt;(y1_, y2_)), k(k_) { // nothing } bool operator&amp;lt;(Edge a) { if (a.x == x) { return k &amp;lt; a.k; } return x &amp;lt; a.</description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://www.xcschool.com:9998/d/C0006/p/P0289?tid=642537aebb80c444f9397ad2">许昌高中高级OJ</a></p>
<h2 id="思路">思路</h2>
<p>将矩形面积分解为众多小矩形的面积求和，如图</p>
<p><img src="/img/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A%EF%BC%9AP0289%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%89%AB%E6%8F%8F%E7%BA%BF/1.png" alt="分解矩形"></p>
<p>则图中每个矩形面积为其底乘高，其<strong>底为相邻两个竖边的横坐标之差</strong>，高则为当前竖边的长度</p>
<p>这个矩形的底较为好求，首先以存储竖边的方式存储矩形，不难发现需要存储三个量：一个x坐标，两个y坐标，存储完之后按照<strong>x坐标</strong>进行排序，相邻两个边的横坐标之差即为当前矩形的底边</p>
<p>求高则较为麻烦，首先想象有一条与y轴平行的竖直线扫过矩形，则高即为该竖直线在矩形中的长度，那么如何求这个长度呢？</p>
<p>在未扫过任何矩形时，该长度为0，每扫过一个矩形的左边的边，则向该边区间的标记上增加1，每扫过一个右边的边，则向标记上减1，计算标记长度即可，在此处应使用线段树进行提速，每条边的标记长度（len）分为两种情况：</p>
<ul>
<li>该边被完全标记（cnt=1），则标记长度即为区间长度</li>
<li>该边未被完全标记（cnt!=1），则标记长度即为其左子树（左半部分）标记长度加上右子树（右半部分）标记长度</li>
</ul>
<p>接下来考虑实现，存储边可使用结构体，存储x,y1,y2坐标，以及一个k变量区分是左边还是右边，则可得出 Edge 的定义：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> ull;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Edge</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    ull x;
</span></span><span style="display:flex;"><span>    pair<span style="color:#f92672">&lt;</span>ull, ull<span style="color:#f92672">&gt;</span> y;
</span></span><span style="display:flex;"><span>    ull k;
</span></span><span style="display:flex;"><span>    Edge() <span style="color:#f92672">:</span> x(<span style="color:#ae81ff">0</span>), y(pair<span style="color:#f92672">&lt;</span>ull, ull<span style="color:#f92672">&gt;</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)), k(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// nothing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>    Edge(ull x_, ull y1_, ull y2_, ull k_) <span style="color:#f92672">:</span> x(x_), y(pair<span style="color:#f92672">&lt;</span>ull, ull<span style="color:#f92672">&gt;</span>(y1_, y2_)), k(k_)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// nothing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;</span>(Edge a)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (a.x <span style="color:#f92672">==</span> x)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> k <span style="color:#f92672">&lt;</span> a.k;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> x <span style="color:#f92672">&lt;</span> a.x;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>线段树上的结点应当存储该区间覆盖长度（len），区间覆盖次数（cnt）两个变量，定义如下:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> ull;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Node</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    ull cnt;
</span></span><span style="display:flex;"><span>    ull len;
</span></span><span style="display:flex;"><span>    Node() <span style="color:#f92672">:</span> cnt(<span style="color:#ae81ff">0</span>), len(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// nothing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>更新部分如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> ull;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">updatelen</span>(ull o, ull l, ull r)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (node[o].cnt)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        node[o].len <span style="color:#f92672">=</span> raw[r <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> raw[l];
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        node[o].len <span style="color:#f92672">=</span> node[o <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>].len <span style="color:#f92672">+</span> node[o <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].len;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">update</span>(ull o, ull l, ull r, ull ql, ull qr, ull val)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (ql <span style="color:#f92672">&lt;=</span> l <span style="color:#f92672">&amp;&amp;</span> r <span style="color:#f92672">&lt;=</span> qr)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        node[o].cnt <span style="color:#f92672">+=</span> val;
</span></span><span style="display:flex;"><span>        updatelen(o, l, r);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ull mid <span style="color:#f92672">=</span> (l <span style="color:#f92672">+</span> r) <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (mid <span style="color:#f92672">&gt;=</span> ql)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        update(o <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>, l, mid, ql, qr, val);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (mid <span style="color:#f92672">&lt;</span> qr)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        update(o <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, mid <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, r, ql, qr, val);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    updatelen(o, l, r);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>注意：因为y坐标取值范围为 [0,1e9] ,应当对y坐标进行离散化（即代码中raw数组）</p>
<h2 id="code">Code</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> ull;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> ull MAXN <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e5</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">readInt</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, f <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">||</span> ch <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (ch <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            f <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">&amp;&amp;</span> ch <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> ch <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>;
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> f;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">write</span>(ull x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        write(x <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    putchar(x <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Node</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    ull cnt;
</span></span><span style="display:flex;"><span>    ull len;
</span></span><span style="display:flex;"><span>    Node() <span style="color:#f92672">:</span> cnt(<span style="color:#ae81ff">0</span>), len(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// nothing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Edge</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    ull x;
</span></span><span style="display:flex;"><span>    pair<span style="color:#f92672">&lt;</span>ull, ull<span style="color:#f92672">&gt;</span> y;
</span></span><span style="display:flex;"><span>    ull k;
</span></span><span style="display:flex;"><span>    Edge() <span style="color:#f92672">:</span> x(<span style="color:#ae81ff">0</span>), y(pair<span style="color:#f92672">&lt;</span>ull, ull<span style="color:#f92672">&gt;</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)), k(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// nothing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>    Edge(ull x_, ull y1_, ull y2_, ull k_) <span style="color:#f92672">:</span> x(x_), y(pair<span style="color:#f92672">&lt;</span>ull, ull<span style="color:#f92672">&gt;</span>(y1_, y2_)), k(k_)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// nothing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;</span>(Edge a)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (a.x <span style="color:#f92672">==</span> x)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> k <span style="color:#f92672">&lt;</span> a.k;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> x <span style="color:#f92672">&lt;</span> a.x;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>ull n;
</span></span><span style="display:flex;"><span>ull m;
</span></span><span style="display:flex;"><span>ull ans <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>Node node[MAXN <span style="color:#f92672">*</span> <span style="color:#ae81ff">16</span>];
</span></span><span style="display:flex;"><span>ull rk[MAXN <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>ull raw[MAXN <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>Edge edge[MAXN <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">updatelen</span>(ull o, ull l, ull r)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (node[o].cnt)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        node[o].len <span style="color:#f92672">=</span> raw[r <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> raw[l];
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        node[o].len <span style="color:#f92672">=</span> node[o <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>].len <span style="color:#f92672">+</span> node[o <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].len;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">update</span>(ull o, ull l, ull r, ull ql, ull qr, ull val)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (ql <span style="color:#f92672">&lt;=</span> l <span style="color:#f92672">&amp;&amp;</span> r <span style="color:#f92672">&lt;=</span> qr)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        node[o].cnt <span style="color:#f92672">+=</span> val;
</span></span><span style="display:flex;"><span>        updatelen(o, l, r);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ull mid <span style="color:#f92672">=</span> (l <span style="color:#f92672">+</span> r) <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (mid <span style="color:#f92672">&gt;=</span> ql)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        update(o <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>, l, mid, ql, qr, val);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (mid <span style="color:#f92672">&lt;</span> qr)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        update(o <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, mid <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, r, ql, qr, val);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    updatelen(o, l, r);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    memset(rk, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(rk));
</span></span><span style="display:flex;"><span>    memset(raw, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(raw));
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">=</span> readInt();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (ull i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; i <span style="color:#f92672">&lt;=</span> n; i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        pair<span style="color:#f92672">&lt;</span>ull, ull<span style="color:#f92672">&gt;</span> x, y;
</span></span><span style="display:flex;"><span>        x.first <span style="color:#f92672">=</span> readInt();
</span></span><span style="display:flex;"><span>        y.first <span style="color:#f92672">=</span> readInt();
</span></span><span style="display:flex;"><span>        x.second <span style="color:#f92672">=</span> readInt();
</span></span><span style="display:flex;"><span>        y.second <span style="color:#f92672">=</span> readInt();
</span></span><span style="display:flex;"><span>        rk[i <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> y.first;
</span></span><span style="display:flex;"><span>        rk[i <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> y.second;
</span></span><span style="display:flex;"><span>        edge[i <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> (Edge(x.first, y.first, y.second, <span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>        edge[i <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> (Edge(x.second, y.first, y.second, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    sort(rk <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, rk <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> unique(rk <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, rk <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">-</span> rk <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (ull i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> n; i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        pair<span style="color:#f92672">&lt;</span>ull, ull<span style="color:#f92672">&gt;</span> newy;
</span></span><span style="display:flex;"><span>        newy.first <span style="color:#f92672">=</span> lower_bound(rk <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, rk <span style="color:#f92672">+</span> m <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, edge[i].y.first) <span style="color:#f92672">-</span> rk;
</span></span><span style="display:flex;"><span>        newy.second <span style="color:#f92672">=</span> lower_bound(rk <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, rk <span style="color:#f92672">+</span> m <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, edge[i].y.second) <span style="color:#f92672">-</span> rk;
</span></span><span style="display:flex;"><span>        raw[newy.first] <span style="color:#f92672">=</span> edge[i].y.first;
</span></span><span style="display:flex;"><span>        raw[newy.second] <span style="color:#f92672">=</span> edge[i].y.second;
</span></span><span style="display:flex;"><span>        edge[i].y <span style="color:#f92672">=</span> newy;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    sort(edge <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, edge <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (ull i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; i <span style="color:#f92672">&lt;</span> (n <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">1</span>); i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        update(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, m, edge[i].y.first, edge[i].y.second <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, edge[i].k);
</span></span><span style="display:flex;"><span>        ans <span style="color:#f92672">+=</span> node[<span style="color:#ae81ff">1</span>].len <span style="color:#f92672">*</span> (edge[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>].x <span style="color:#f92672">-</span> edge[i].x);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    write(ans);
</span></span><span style="display:flex;"><span>    putchar(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>解题报告：P8151 石子合并2</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8151-%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B62/</link>
            <pubDate>Sun, 16 Apr 2023 09:07:12 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap8151-%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B62/</guid>
            <description>题目链接：许昌高中高级OJ，LibreOJ
思路 首先考虑不再一条环上，即所有石子排成一列，每次合并相邻的两堆石子，求最大得分的问题
由于每次只能合并相邻的石子，不满足部分最优解是全局最优解，故无法使用贪心算法
则使用区间dp，记录 $dp[i][j]$ 为从i位置合并到j位置所得到的最小（最大）得分，则状态转移方程为：
$$dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1])$$
分两次进行计算最大值与最小值即可
接下来考虑有环的情况，有两种思路：
断环，枚举在 $[1,i]$ 位置断环，分别计算最值，时间复杂度为 $\Theta(n^4)$ 复制，将原数组复制一次，计算新数组的最值，最后取 $max \lbrace dp[i][i+n-1],i \in \lbrack 1,n \rbrack \rbrace$ 即可，时间复杂度为 $\Theta(n^3)$ 代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int MAXN = 200; int n; int ans; int num[MAXN*2+5]; int sum[MAXN*2+5]; int dp[MAXN*2+5][MAXN*2+5]; inline int readInt() { int res=0,k=1; char ch; ch=getchar(); while(ch&amp;lt;&amp;#39;0&amp;#39;||ch&amp;gt;&amp;#39;9&amp;#39;) { if(ch==&amp;#39;-&amp;#39;) k=-1; ch=getchar(); } while(ch&amp;gt;=&amp;#39;0&amp;#39;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#39;9&amp;#39;) res*=10,res+=ch-&amp;#39;0&amp;#39;,ch=getchar(); return k*res; } inline void writeInt(int x) { if(x&amp;lt;0) putchar(&amp;#39;-&amp;#39;),x=-x; if(x&amp;gt;9) writeInt(x/10); putchar(x%10+&amp;#39;0&amp;#39;); } int main() { n=readInt(); for(int i=1;i&amp;lt;=n;i++) { num[i]=readInt(); sum[i]=sum[i-1]+num[i]; } for(int i=n+1;i&amp;lt;=2*n;i++) { num[i]=num[i-n]; sum[i]=sum[i-1]+num[i]; } ans=0x3f3f3f3f; memset(dp,0x3f,sizeof(dp)); for(int i=1;i&amp;lt;=2*n;i++) { dp[i][i]=dp[i][i]=0; } for(int l=2;l&amp;lt;=2*n;l++) { for(int i=1;i&amp;lt;=2*n-l+1;i++) { int j=i+l-1; for(int k=i;k&amp;lt;j;k++) { dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1]); } } } for(int i=1;i&amp;lt;=n;i++) { ans=min(ans,dp[i][i+n-1]); } writeInt(ans); putchar(&amp;#39;\n&amp;#39;); ans=-1; memset(dp,0,sizeof(dp)); for(int i=1;i&amp;lt;=2*n;i++) { dp[i][i]=dp[i][i]=0; } for(int l=2;l&amp;lt;=2*n;l++) { for(int i=1;i&amp;lt;=2*n-l+1;i++) { int j=i+l-1; for(int k=i;k&amp;lt;j;k++) { dp[i][j]=max(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1]); } } } for(int i=1;i&amp;lt;=n;i++) { ans=max(ans,dp[i][i+n-1]); } writeInt(ans); putchar(&amp;#39;\n&amp;#39;); } </description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://www.xcschool.com:9998/d/C0006/p/P8151?tid=643b39b16f36ff40bf27c360">许昌高中高级OJ</a>，<a href="https://loj.ac/p/10147">LibreOJ</a></p>
<h2 id="思路">思路</h2>
<p>首先考虑不再一条环上，即所有石子排成一列，每次合并相邻的两堆石子，求最大得分的问题</p>
<p>由于每次只能合并相邻的石子，不满足部分最优解是全局最优解，故无法使用贪心算法</p>
<p>则使用区间dp，记录 $dp[i][j]$ 为<strong>从i位置合并到j位置所得到的最小（最大）得分</strong>，则状态转移方程为：</p>
<p>$$dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1])$$</p>
<p>分两次进行计算最大值与最小值即可</p>
<p>接下来考虑有环的情况，有两种思路：</p>
<ul>
<li>断环，枚举在 $[1,i]$ 位置断环，分别计算最值，时间复杂度为 $\Theta(n^4)$</li>
<li>复制，将原数组复制一次，计算新数组的最值，最后取 $max \lbrace dp[i][i+n-1],i \in \lbrack 1,n \rbrack \rbrace$ 即可，时间复杂度为 $\Theta(n^3)$</li>
</ul>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> MAXN <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> n;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> ans;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> num[MAXN<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> sum[MAXN<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> dp[MAXN<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>][MAXN<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">readInt</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> res<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>,k<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> ch;
</span></span><span style="display:flex;"><span>	ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>(ch<span style="color:#f92672">&lt;</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">||</span>ch<span style="color:#f92672">&gt;</span><span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(ch<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>			k<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>		ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>(ch<span style="color:#f92672">&gt;=</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">&amp;&amp;</span>ch<span style="color:#f92672">&lt;=</span><span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>		res<span style="color:#f92672">*=</span><span style="color:#ae81ff">10</span>,res<span style="color:#f92672">+=</span>ch<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;0&#39;</span>,ch<span style="color:#f92672">=</span>getchar();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> k<span style="color:#f92672">*</span>res;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">writeInt</span>(<span style="color:#66d9ef">int</span> x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(x<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>		putchar(<span style="color:#e6db74">&#39;-&#39;</span>),x<span style="color:#f92672">=-</span>x;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(x<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>		writeInt(x<span style="color:#f92672">/</span><span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>	putchar(x<span style="color:#f92672">%</span><span style="color:#ae81ff">10</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	n<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		num[i]<span style="color:#f92672">=</span>readInt();
</span></span><span style="display:flex;"><span>		sum[i]<span style="color:#f92672">=</span>sum[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span>num[i];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span>n<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		num[i]<span style="color:#f92672">=</span>num[i<span style="color:#f92672">-</span>n];
</span></span><span style="display:flex;"><span>		sum[i]<span style="color:#f92672">=</span>sum[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span>num[i];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	ans<span style="color:#f92672">=</span><span style="color:#ae81ff">0x3f3f3f3f</span>;
</span></span><span style="display:flex;"><span>	memset(dp,<span style="color:#ae81ff">0x3f</span>,<span style="color:#66d9ef">sizeof</span>(dp));
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		dp[i][i]<span style="color:#f92672">=</span>dp[i][i]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> l<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;l<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n;l<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n<span style="color:#f92672">-</span>l<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> j<span style="color:#f92672">=</span>i<span style="color:#f92672">+</span>l<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> k<span style="color:#f92672">=</span>i;k<span style="color:#f92672">&lt;</span>j;k<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				dp[i][j]<span style="color:#f92672">=</span>min(dp[i][j],dp[i][k]<span style="color:#f92672">+</span>dp[k<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>][j]<span style="color:#f92672">+</span>sum[j]<span style="color:#f92672">-</span>sum[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		ans<span style="color:#f92672">=</span>min(ans,dp[i][i<span style="color:#f92672">+</span>n<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	writeInt(ans);
</span></span><span style="display:flex;"><span>	putchar(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>	ans<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	memset(dp,<span style="color:#ae81ff">0</span>,<span style="color:#66d9ef">sizeof</span>(dp));
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		dp[i][i]<span style="color:#f92672">=</span>dp[i][i]<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> l<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>;l<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n;l<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>n<span style="color:#f92672">-</span>l<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">int</span> j<span style="color:#f92672">=</span>i<span style="color:#f92672">+</span>l<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> k<span style="color:#f92672">=</span>i;k<span style="color:#f92672">&lt;</span>j;k<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				dp[i][j]<span style="color:#f92672">=</span>max(dp[i][j],dp[i][k]<span style="color:#f92672">+</span>dp[k<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>][j]<span style="color:#f92672">+</span>sum[j]<span style="color:#f92672">-</span>sum[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;=</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		ans<span style="color:#f92672">=</span>max(ans,dp[i][i<span style="color:#f92672">+</span>n<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	writeInt(ans);
</span></span><span style="display:flex;"><span>	putchar(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>解题报告：P0288 Number of Airplanes in the Sky（数飞机）</title>
            <link>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap0288-number-of-airplanes-in-the-sky%E6%95%B0%E9%A3%9E%E6%9C%BA/</link>
            <pubDate>Sat, 15 Apr 2023 09:07:12 +0800</pubDate>
            
            <guid>https://blog.doubleki.eu.org/posts/2023/04/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8Ap0288-number-of-airplanes-in-the-sky%E6%95%B0%E9%A3%9E%E6%9C%BA/</guid>
            <description>题目链接：许昌高中高级OJ
思路 对于每架飞机，记录其起飞与降落时间，按照时间第一优先级，起飞降落第二优先级排序，从头到尾进行扫描，起飞飞机数 +1，降落飞机数 -1，取 max 即为结果
注意：落地时间应为降落时间 +1
代码 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; inline int readInt() { int x = 0, f = 1; char ch = getchar(); while (ch &amp;lt; &amp;#39;0&amp;#39; || ch &amp;gt; &amp;#39;9&amp;#39;) { if (ch == &amp;#39;-&amp;#39;) { f = -1; } ch = getchar(); } while (ch &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; ch &amp;lt;= &amp;#39;9&amp;#39;) { x = x * 10 + ch - &amp;#39;0&amp;#39;; ch = getchar(); } return x * f; } inline void write(int x) { if (x &amp;lt; 0) { putchar(&amp;#39;-&amp;#39;), x = -x; } if (x &amp;gt; 9) { write(x / 10); } putchar(x % 10 + &amp;#39;0&amp;#39;); return; } struct Time { int t; int k; Time(int t_, int k_) : t(t_), k(k_) { } bool operator&amp;lt;(Time a) { if (t == a.</description>
            <content type="html"><![CDATA[<p>题目链接：<a href="http://www.xcschool.com:9998/d/C0006/p/P0288">许昌高中高级OJ</a></p>
<h2 id="思路">思路</h2>
<p>对于每架飞机，记录其起飞与降落时间，按照时间第一优先级，起飞降落第二优先级排序，从头到尾进行扫描，起飞飞机数 +1，降落飞机数 -1，取 max 即为结果</p>
<p>注意：落地时间应为降落时间 +1</p>
<h2 id="代码">代码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">readInt</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, f <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">||</span> ch <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (ch <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            f <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (ch <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">&amp;&amp;</span> ch <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;9&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> ch <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;0&#39;</span>;
</span></span><span style="display:flex;"><span>        ch <span style="color:#f92672">=</span> getchar();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> f;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">write</span>(<span style="color:#66d9ef">int</span> x)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        putchar(<span style="color:#e6db74">&#39;-&#39;</span>), x <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>x;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        write(x <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    putchar(x <span style="color:#f92672">%</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Time</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> t;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> k;
</span></span><span style="display:flex;"><span>    Time(<span style="color:#66d9ef">int</span> t_, <span style="color:#66d9ef">int</span> k_) <span style="color:#f92672">:</span> t(t_), k(k_)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;</span>(Time a)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (t <span style="color:#f92672">==</span> a.t)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> k <span style="color:#f92672">&lt;</span> a.k;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> t <span style="color:#f92672">&lt;</span> a.t;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> n;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> ans_now, ans;
</span></span><span style="display:flex;"><span>vector<span style="color:#f92672">&lt;</span>Time<span style="color:#f92672">&gt;</span> a;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">=</span> readInt();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; i <span style="color:#f92672">&lt;=</span> n; i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> l, r;
</span></span><span style="display:flex;"><span>        l <span style="color:#f92672">=</span> readInt();
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> readInt();
</span></span><span style="display:flex;"><span>        a.push_back(Time(l, <span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>        a.push_back(Time(r <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    sort(a.begin(), a.end());
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> a.size(); i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        ans_now <span style="color:#f92672">+=</span> a[i].k;
</span></span><span style="display:flex;"><span>        ans <span style="color:#f92672">=</span> max(ans, ans_now);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    write(ans);
</span></span><span style="display:flex;"><span>    putchar(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
